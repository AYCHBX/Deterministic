"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var prepare_1 = require("./prepare");
var constants_1 = require("./constants");
var signature_generator_1 = require("@waves/signature-generator");
var fieldsType = require("./fieldTypes");
var schema = prepare_1.prepare.schema, wrap = prepare_1.prepare.wrap, signSchema = prepare_1.prepare.signSchema, processors = prepare_1.prepare.processors;
var SIGN_SCHEMA = (_a = {},
    _a[constants_1.SIGN_TYPE.MATCHER_ORDERS] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.AUTH] = [
        fieldsType.string('prefix', null, processors.addValue('WavesWalletAuthentication'), true),
        fieldsType.string('host'),
        fieldsType.string('data'),
    ],
    _a[constants_1.SIGN_TYPE.COINOMAT_CONFIRMATION] = [
        fieldsType.string('prefix', null, processors.addValue('Coinomat'), true),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.CREATE_ORDER] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.string('matcherPublicKey'),
        fieldsType.money('amount', 'amountAsset', processors.moneyToAssetId),
        fieldsType.money('price', 'priceAsset', processors.moneyToAssetId),
        fieldsType.orderType('orderType'),
        fieldsType.money('amount', 'amount', processors.toBigNumber),
        fieldsType.fromData(null, 'price', processors.toOrderPrice),
        fieldsType.numberLike('matcherFee', null, processors.toBigNumber),
        fieldsType.timestamp('expiration', null, processors.expiration),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.CANCEL_ORDER] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.string('id', 'orderId'),
    ],
    _a[constants_1.SIGN_TYPE.ISSUE] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.assetName('name'),
        fieldsType.assetDescription('description'),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.numberLike('quantity', null, processors.toBigNumber),
        fieldsType.precision('precision'),
        fieldsType.boolean('reissuable'),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.REISSUE] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.asset('assetId'),
        fieldsType.numberLike('quantity', null, processors.toBigNumber),
        fieldsType.boolean('reissuable'),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.BURN] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.asset('assetId'),
        fieldsType.numberLike('amount', 'quantity', processors.toBigNumber),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.SPONSORSHIP] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.money('minSponsoredAssetFee', 'assetId', processors.moneyToAssetId),
        fieldsType.numberLike('minSponsoredAssetFee', null, processors.toBigNumber),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.TRANSFER] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.money('amount', 'assetId', processors.moneyToAssetId),
        fieldsType.required('amount', null, processors.toBigNumber),
        fieldsType.money('fee', 'feeAssetId', processors.moneyToAssetId),
        fieldsType.required('fee', 'fee', processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
        fieldsType.aliasOrAddress('recipient'),
        fieldsType.attachment('attachment', null, processors.orString, true),
    ],
    _a[constants_1.SIGN_TYPE.LEASE] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.aliasOrAddress('recipient'),
        fieldsType.numberLike('amount', null, processors.toBigNumber),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.CANCEL_LEASING] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.string('leaseId', 'transactionId'),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.CREATE_ALIAS] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.aliasName('alias'),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.MASS_TRANSFER] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.money('totalAmount', 'assetId', processors.moneyToAssetId),
        fieldsType.transfers('transfers', null, processors.transfers(processors.noProcess, processors.toBigNumber)),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.attachment('attachment', null, processors.orString, true),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
    ],
    _a[constants_1.SIGN_TYPE.DATA] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
        fieldsType.data('data')
    ],
    _a[constants_1.SIGN_TYPE.SET_SCRIPT] = [
        fieldsType.string('senderPublicKey', null, null, true),
        fieldsType.numberLike('fee', null, processors.toBigNumber),
        fieldsType.timestamp('timestamp', null, processors.timestamp),
        fieldsType.number('chainId', null, processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); }), true),
        fieldsType.script('script')
    ],
    _a[constants_1.SIGN_TYPE.EXCHANGE] = [],
    _a);
var schemas;
(function (schemas) {
    var api;
    (function (api) {
        api.coinomatConfirmation = schema(wrap('prefix', 'prefix', processors.addValue('Coinomat')), 'timestamp');
        api.createOrder = schema('matcherPublicKey', 'orderType', wrap(null, 'assetPair', processors.assetPair), wrap(null, 'price', processors.toOrderPrice), wrap('amount', 'amount', processors.toBigNumber), wrap('matcherFee', 'matcherFee', processors.toBigNumber), wrap('expiration', 'expiration', processors.expiration), 'senderPublicKey', 'timestamp', wrap('proofs', 'signature', processors.signatureFromProof));
        api.cancelOrder = schema(wrap('id', 'orderId', processors.noProcess), wrap('senderPublicKey', 'sender', processors.noProcess), wrap('proofs', 'signature', processors.signatureFromProof));
        api.issue = schema(wrap('version', 'version', processors.addValue(2 /* ISSUE */)), wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); })), 'senderPublicKey', 'name', 'description', wrap('quantity', 'quantity', processors.toBigNumber), wrap('precision', 'decimals', processors.noProcess), wrap('reissuable', 'reissuable', processors.noProcess), wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.ISSUE)), 'proofs');
        api.transfer = schema(wrap('version', 'version', processors.addValue(2 /* TRANSFER */)), wrap('amount', 'assetId', processors.moneyToNodeAssetId), wrap('amount', 'amount', processors.toBigNumber), wrap('fee', 'feeAssetId', processors.moneyToNodeAssetId), wrap('fee', 'fee', processors.toBigNumber), wrap('recipient', 'recipient', processors.recipient), wrap('attachment', 'attachment', processors.attachment), wrap('timestamp', 'timestamp', processors.timestamp), 'senderPublicKey', 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.TRANSFER)));
        api.reissue = schema(wrap('version', 'version', processors.addValue(2 /* REISSUE */)), 'senderPublicKey', wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); })), wrap('assetId', 'assetId', processors.noProcess), wrap('quantity', 'quantity', processors.toBigNumber), wrap('reissuable', 'reissuable', processors.noProcess), wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.REISSUE)));
        api.burn = schema(wrap('version', 'version', processors.addValue(2 /* BURN */)), wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); })), 'senderPublicKey', wrap('assetId', 'assetId', processors.noProcess), wrap('amount', 'quantity', processors.toBigNumber), wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.BURN)));
        api.lease = schema(wrap('version', 'version', processors.addValue(2 /* LEASE */)), wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); })), 'senderPublicKey', wrap('recipient', 'recipient', processors.recipient), wrap('amount', 'amount', processors.toBigNumber), wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.LEASE)));
        api.cancelLeasing = schema(wrap('version', 'version', processors.addValue(2 /* CANCEL_LEASING */)), wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.getNetworkByte(); })), 'senderPublicKey', wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), wrap('leaseId', 'leaseId', processors.noProcess), 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.CANCEL_LEASING)));
        api.alias = schema(wrap('version', 'version', processors.addValue(2 /* CREATE_ALIAS */)), 'senderPublicKey', wrap('alias', 'alias', processors.noProcess), wrap('fee', 'fee', processors.toBigNumber), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs', wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.CREATE_ALIAS)));
        api.massTransfer = schema('senderPublicKey', wrap('version', 'version', processors.addValue(1 /* MASS_TRANSFER */)), wrap('totalAmount', 'assetId', processors.moneyToNodeAssetId), wrap('transfers', 'transfers', processors.transfers(processors.recipient, processors.toBigNumber)), wrap('timestamp', 'timestamp', processors.timestamp), wrap('fee', 'fee', processors.toBigNumber), wrap('attachment', 'attachment', processors.attachment), wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.MASS_TRANSFER)), 'proofs');
        api.data = schema(wrap('version', 'version', processors.addValue(1 /* DATA */)), 'senderPublicKey', 'data', wrap('fee', 'fee', processors.toBigNumber), wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.DATA)), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs');
        api.setScript = schema(wrap('version', 'version', processors.addValue(1 /* SET_SCRIPT */)), 'senderPublicKey', wrap('script', 'script', processors.scriptProcessor), wrap('chainId', 'chainId', processors.addValue(function () { return signature_generator_1.config.get('networkByte'); })), wrap('fee', 'fee', processors.toBigNumber), wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.SET_SCRIPT)), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs');
        api.sponsorship = schema(wrap('version', 'version', processors.addValue(1 /* SPONSORSHIP */)), 'senderPublicKey', wrap('minSponsoredAssetFee', 'assetId', processors.moneyToAssetId), wrap('minSponsoredAssetFee', 'minSponsoredAssetFee', processors.toSponsorshipFee), wrap('fee', 'fee', processors.toBigNumber), wrap('type', 'type', processors.addValue(constants_1.SIGN_TYPE.SPONSORSHIP)), wrap('timestamp', 'timestamp', processors.timestamp), 'proofs');
    })(api = schemas.api || (schemas.api = {}));
    var sign;
    (function (sign) {
        sign.matcherOrders = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.MATCHER_ORDERS]);
        sign.auth = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.AUTH]);
        sign.coinomatConfirmation = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.COINOMAT_CONFIRMATION]);
        sign.createOrder = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.CREATE_ORDER]);
        sign.cancelOrder = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.CANCEL_ORDER]);
        sign.issue = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.ISSUE]);
        sign.transfer = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.TRANSFER]);
        sign.reissue = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.REISSUE]);
        sign.burn = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.BURN]);
        sign.lease = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.LEASE]);
        sign.cancelLeasing = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.CANCEL_LEASING]);
        sign.alias = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.CREATE_ALIAS]);
        sign.massTransfer = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.MASS_TRANSFER]);
        sign.data = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.DATA]);
        sign.setScript = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.SET_SCRIPT]);
        sign.sponsorship = signSchema(SIGN_SCHEMA[constants_1.SIGN_TYPE.SPONSORSHIP]);
        sign.exchange = function (data) {
            console.warn('Sign exchange transaction is not supported!');
            return data;
        };
    })(sign = schemas.sign || (schemas.sign = {}));
})(schemas || (schemas = {}));
var hasNoApiMethod = function (schemaType) { return function () {
    throw new Error("Has no method for prepare " + schemaType);
}; };
function getSchemaByType(type) {
    switch (type) {
        case constants_1.SIGN_TYPE.MATCHER_ORDERS:
            return { api: hasNoApiMethod('api, get orders'), sign: schemas.sign.matcherOrders };
        case constants_1.SIGN_TYPE.AUTH:
            return { api: hasNoApiMethod('api auth'), sign: schemas.sign.auth };
        case constants_1.SIGN_TYPE.COINOMAT_CONFIRMATION:
            return { api: schemas.api.coinomatConfirmation, sign: schemas.sign.coinomatConfirmation };
        case constants_1.SIGN_TYPE.CREATE_ORDER:
            return { api: schemas.api.createOrder, sign: schemas.sign.createOrder };
        case constants_1.SIGN_TYPE.CANCEL_ORDER:
            return { api: schemas.api.cancelOrder, sign: schemas.sign.cancelOrder };
        case constants_1.SIGN_TYPE.TRANSFER:
            return { api: schemas.api.transfer, sign: schemas.sign.transfer };
        case constants_1.SIGN_TYPE.ISSUE:
            return { api: schemas.api.issue, sign: schemas.sign.issue };
        case constants_1.SIGN_TYPE.REISSUE:
            return { api: schemas.api.reissue, sign: schemas.sign.reissue };
        case constants_1.SIGN_TYPE.BURN:
            return { api: schemas.api.burn, sign: schemas.sign.burn };
        case constants_1.SIGN_TYPE.EXCHANGE:
            return { api: hasNoApiMethod('api, exchange'), sign: schemas.sign.exchange };
        case constants_1.SIGN_TYPE.LEASE:
            return { api: schemas.api.lease, sign: schemas.sign.lease };
        case constants_1.SIGN_TYPE.CANCEL_LEASING:
            return { api: schemas.api.cancelLeasing, sign: schemas.sign.cancelLeasing };
        case constants_1.SIGN_TYPE.CREATE_ALIAS:
            return { api: schemas.api.alias, sign: schemas.sign.alias };
        case constants_1.SIGN_TYPE.MASS_TRANSFER:
            return { api: schemas.api.massTransfer, sign: schemas.sign.massTransfer };
        case constants_1.SIGN_TYPE.DATA:
            return { api: schemas.api.data, sign: schemas.sign.data };
        case constants_1.SIGN_TYPE.SET_SCRIPT:
            return { api: schemas.api.setScript, sign: schemas.sign.setScript };
        case constants_1.SIGN_TYPE.SPONSORSHIP:
            return { api: schemas.api.sponsorship, sign: schemas.sign.sponsorship };
    }
}
exports.getSchemaByType = getSchemaByType;
//# sourceMappingURL=schemas.js.map