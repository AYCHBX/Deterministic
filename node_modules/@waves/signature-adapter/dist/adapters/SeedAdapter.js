"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Adapter_1 = require("./Adapter");
var signature_generator_1 = require("@waves/signature-generator");
var SeedAdapter = /** @class */ (function (_super) {
    __extends(SeedAdapter, _super);
    function SeedAdapter(data) {
        var _this = _super.call(this) || this;
        var seed;
        if (typeof data === 'string') {
            seed = data;
        }
        else {
            var user = data;
            var encryptionRounds = user.encryptionRounds;
            seed = signature_generator_1.Seed.decryptSeedPhrase(user.encryptedSeed, user.password, encryptionRounds);
        }
        _this.seed = new signature_generator_1.Seed(seed);
        return _this;
    }
    SeedAdapter.prototype.getPublicKey = function () {
        return Promise.resolve(this.seed.keyPair.publicKey);
    };
    SeedAdapter.prototype.getPrivateKey = function () {
        return Promise.resolve(this.seed.keyPair.privateKey);
    };
    SeedAdapter.prototype.getAddress = function () {
        return Promise.resolve(this.seed.address);
    };
    SeedAdapter.prototype.getSeed = function () {
        return Promise.resolve(this.seed.phrase);
    };
    SeedAdapter.prototype.signRequest = function (bytes) {
        return this._sign(bytes);
    };
    SeedAdapter.prototype.signTransaction = function (bytes, amountPrecision) {
        return this._sign(bytes);
    };
    SeedAdapter.prototype.signOrder = function (bytes, amountPrecision) {
        return this._sign(bytes);
    };
    SeedAdapter.prototype.signData = function (bytes) {
        return this._sign(bytes);
    };
    SeedAdapter.prototype._sign = function (bytes) {
        return Promise.resolve(signature_generator_1.utils.crypto.buildTransactionSignature(bytes, this.seed.keyPair.privateKey));
    };
    SeedAdapter.isAvailable = function () {
        return Promise.resolve(true);
    };
    SeedAdapter.type = "seed" /* Seed */;
    return SeedAdapter;
}(Adapter_1.Adapter));
exports.SeedAdapter = SeedAdapter;
//# sourceMappingURL=SeedAdapter.js.map