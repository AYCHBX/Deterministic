"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("@waves/signature-generator/src/index");
var utils_1 = require("../utils");
var Signable = /** @class */ (function () {
    function Signable(type) {
        this.data = Object.create(null);
        this.proofs = [];
        this.type = type;
    }
    Signable.prototype.addProof = function (signature) {
        if (this.proofs.indexOf(signature) !== -1) {
            this.proofs.push(signature);
        }
        return this;
    };
    Signable.prototype.getId = function () {
        return this.byteDefer.promise.then(index_1.utils.crypto.buildTransactionId);
    };
    Signable.prototype.update = function (data) {
        this.data = __assign({}, this.data, data);
        this.clearDefer();
    };
    Signable.prototype.getSignature = function () {
        // TODO!
    };
    Signable.prototype.getBytes = function () {
        // TODO!
    };
    Signable.prototype.getApiJSON = function () {
        // TODO!
    };
    Signable.prototype.updateFee = function () {
        if (this.feeDefer) {
            this.feeDefer.reject(new Error('Has new data.'));
        }
        this.feeDefer = utils_1.defer();
    };
    Signable.prototype.clearDefer = function () {
        var error = new Error('Abort');
        if (this.feeDefer) {
            this.feeDefer.reject(error);
            this.feeDefer = null;
        }
        if (this.byteDefer) {
            this.byteDefer.reject(error);
            this.byteDefer = null;
        }
        if (this.signDefer) {
            this.signDefer.reject(error);
            this.byteDefer = null;
        }
    };
    Signable.prototype.getBytePromise = function () {
        if (!this.byteDefer) {
            this.byteDefer = utils_1.defer();
        }
        return this.byteDefer;
    };
    return Signable;
}());
exports.Signable = Signable;
//# sourceMappingURL=Signable.js.map