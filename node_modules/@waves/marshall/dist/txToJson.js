"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
var serializePrimitives_1 = require("./serializePrimitives");
function resolvePath(path, obj) {
    if (path.length === 0)
        return obj;
    if (typeof obj !== 'object')
        return undefined;
    return resolvePath(path.slice(1), obj[path[0]]);
}
var isLongProp = function (fullPath, fullSchema, targetObject) {
    function go(path, schema) {
        if (schema == null)
            return false;
        if (path.length === 0 && (schema.type === 'primitive' || schema.type === undefined))
            return schema.toBytes === serializePrimitives_1.LONG;
        if (schema.type === 'object')
            return go(path.slice(1), schema.schema.find(function (item) { return item.name === path[0]; }));
        if (schema.type === 'array') {
            return go(path.slice(1), schema.items);
        }
        if (schema.type === 'dataTxField') {
            if (path[0] !== 'value')
                return false;
            var dataObj = resolvePath(fullPath.slice(0, fullPath.length - 1), targetObject);
            var dataSchema = schema.items.get(dataObj.type);
            return go(path.slice(1), dataSchema);
        }
        if (schema.type === 'anyOf') {
            if (path[0] !== schema.discriminatorField || 'type') {
                return false;
            }
            var obj = resolvePath(fullPath.slice(0, fullPath.length - 1), targetObject);
            return go(path.slice(1), schema.items.get(obj[schema.discriminatorField || 'type']));
        }
        return false;
    }
    return go(fullPath, fullSchema);
};
function txToJson(tx) {
    var path = [];
    var stack = [];
    var type = tx.type, version = tx.version;
    var schema = index_1.getSchema(type, version);
    function stringifyValue(value) {
        if (typeof value === 'string') {
            if (isLongProp(path, schema, tx)) {
                return value;
            }
        }
        if (typeof value === 'boolean' || value instanceof Boolean ||
            value === null ||
            typeof value === 'number' || value instanceof Number ||
            typeof value === 'string' || value instanceof String ||
            value instanceof Date) {
            return JSON.stringify(value);
        }
        if (Array.isArray(value)) {
            return stringifyArray(value);
        }
        if (value && typeof value === 'object') {
            return stringifyObject(value);
        }
        return undefined;
    }
    function stringifyArray(array) {
        var str = '[';
        var stackIndex = stack.length;
        stack[stackIndex] = array;
        for (var i = 0; i < array.length; i++) {
            var key = i + '';
            var item = array[i];
            if (typeof item !== 'undefined' && typeof item !== 'function') {
                path[stackIndex] = key;
                str += stringifyValue(item);
            }
            else {
                str += 'null';
            }
            if (i < array.length - 1) {
                str += ',';
            }
        }
        stack.length = stackIndex;
        path.length = stackIndex;
        str += ']';
        return str;
    }
    function stringifyObject(object) {
        var first = true;
        var str = '{';
        var stackIndex = stack.length;
        stack[stackIndex] = object;
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                var value = object[key];
                if (includeProperty(value)) {
                    if (first) {
                        first = false;
                    }
                    else {
                        str += ',';
                    }
                    str += ('"' + key + '":');
                    path[stackIndex] = key;
                    str += stringifyValue(value);
                }
            }
        }
        stack.length = stackIndex;
        path.length = stackIndex;
        str += '}';
        return str;
    }
    function includeProperty(value) {
        return typeof value !== 'undefined'
            && typeof value !== 'function';
    }
    return stringifyValue(tx) || '';
}
exports.txToJson = txToJson;
//# sourceMappingURL=txToJson.js.map