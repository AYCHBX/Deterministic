"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var serializePrimitives_1 = require("./serializePrimitives");
var parsePrimitives_1 = require("./parsePrimitives");
//Todo: import this enums from ts-types package
var TRANSACTION_TYPE;
(function (TRANSACTION_TYPE) {
    TRANSACTION_TYPE[TRANSACTION_TYPE["GENESIS"] = 1] = "GENESIS";
    TRANSACTION_TYPE[TRANSACTION_TYPE["PAYMENT"] = 2] = "PAYMENT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["ISSUE"] = 3] = "ISSUE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["TRANSFER"] = 4] = "TRANSFER";
    TRANSACTION_TYPE[TRANSACTION_TYPE["REISSUE"] = 5] = "REISSUE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["BURN"] = 6] = "BURN";
    TRANSACTION_TYPE[TRANSACTION_TYPE["EXCHANGE"] = 7] = "EXCHANGE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["LEASE"] = 8] = "LEASE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["CANCEL_LEASE"] = 9] = "CANCEL_LEASE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["ALIAS"] = 10] = "ALIAS";
    TRANSACTION_TYPE[TRANSACTION_TYPE["MASS_TRANSFER"] = 11] = "MASS_TRANSFER";
    TRANSACTION_TYPE[TRANSACTION_TYPE["DATA"] = 12] = "DATA";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SET_SCRIPT"] = 13] = "SET_SCRIPT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SPONSORSHIP"] = 14] = "SPONSORSHIP";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SET_ASSET_SCRIPT"] = 15] = "SET_ASSET_SCRIPT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["CONTRACT_INVOCATION"] = 16] = "CONTRACT_INVOCATION";
})(TRANSACTION_TYPE = exports.TRANSACTION_TYPE || (exports.TRANSACTION_TYPE = {}));
var DATA_FIELD_TYPE;
(function (DATA_FIELD_TYPE) {
    DATA_FIELD_TYPE["INTEGER"] = "integer";
    DATA_FIELD_TYPE["BOOLEAN"] = "boolean";
    DATA_FIELD_TYPE["STRING"] = "string";
    DATA_FIELD_TYPE["BINARY"] = "binary";
})(DATA_FIELD_TYPE = exports.DATA_FIELD_TYPE || (exports.DATA_FIELD_TYPE = {}));
var txFields;
(function (txFields) {
    //Field constructors
    txFields.longField = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.LONG,
        fromBytes: parsePrimitives_1.P_LONG
    }); };
    txFields.byteField = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.BYTE,
        fromBytes: parsePrimitives_1.P_BYTE
    }); };
    txFields.booleanField = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.BOOL,
        fromBytes: parsePrimitives_1.P_BOOLEAN
    }); };
    txFields.stringField = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING),
        fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_SHORT)
    }); };
    txFields.base58field32 = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.BASE58_STRING,
        fromBytes: parsePrimitives_1.P_BASE58_FIXED(32)
    }); };
    txFields.base58Option32 = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.OPTION(serializePrimitives_1.BASE58_STRING),
        fromBytes: parsePrimitives_1.P_OPTION(parsePrimitives_1.P_BASE58_FIXED(32))
    }); };
    txFields.base64field = function (name) { return ({
        name: name,
        toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE64_STRING),
        fromBytes: parsePrimitives_1.P_BASE64(parsePrimitives_1.P_SHORT)
    }); };
    // Primitive fields
    txFields.alias = {
        name: 'alias',
        toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING),
        fromBytes: parsePrimitives_1.byteNewAliasToString
    };
    txFields.amount = txFields.longField('amount');
    txFields.assetDescription = txFields.stringField('description');
    txFields.assetId = txFields.base58field32('assetId');
    txFields.assetName = txFields.stringField('name');
    txFields.attachment = {
        name: 'attachment',
        toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE58_STRING),
        fromBytes: parsePrimitives_1.P_BASE58_VAR(parsePrimitives_1.P_SHORT)
    };
    txFields.chainId = txFields.byteField('chainId');
    txFields.decimals = txFields.byteField('decimals');
    txFields.fee = txFields.longField('fee');
    txFields.leaseAssetId = txFields.base58Option32('leaseAssetId');
    txFields.leaseId = txFields.base58field32('leaseId');
    txFields.optionalAssetId = txFields.base58Option32('assetId');
    txFields.quantity = txFields.longField('quantity');
    txFields.reissuable = txFields.booleanField('reissuable');
    txFields.recipient = {
        name: 'recipient',
        toBytes: serializePrimitives_1.BASE58_STRING,
        fromBytes: parsePrimitives_1.byteToAddressOrAlias
    };
    txFields.script = {
        name: 'script',
        toBytes: serializePrimitives_1.SCRIPT,
        fromBytes: parsePrimitives_1.byteToScript
    };
    txFields.senderPublicKey = txFields.base58field32('senderPublicKey');
    txFields.timestamp = txFields.longField('timestamp');
    txFields.type = txFields.byteField('type');
    txFields.version = txFields.byteField('version');
    // Complex fields
    txFields.transfer = {
        name: 'transfer',
        type: 'object',
        schema: [
            txFields.recipient,
            txFields.amount
        ]
    };
    txFields.transfers = {
        name: 'transfers',
        type: 'array',
        items: txFields.transfer
    };
    txFields.dataTxField = {
        name: 'dataTxField',
        type: 'dataTxField',
        items: new Map([
            [DATA_FIELD_TYPE.INTEGER, txFields.longField('value')],
            [DATA_FIELD_TYPE.BOOLEAN, txFields.booleanField('value')],
            [DATA_FIELD_TYPE.BINARY, txFields.base64field('value')],
            [DATA_FIELD_TYPE.STRING, txFields.stringField('value')]
        ])
    };
    txFields.functionArgField = {
        name: 'args',
        type: 'anyOf',
        discriminatorField: 'type',
        // toBytes: INT,
        // fromBytes: P_INT,
        items: new Map([
            ['integer', txFields.longField('value')],
            ['binary', { name: '', toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.BASE64_STRING), fromBytes: parsePrimitives_1.P_BASE64(parsePrimitives_1.P_INT) }],
            ['string', { name: '', toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.STRING), fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_INT) }],
            [(Symbol('placeholder')), {}],
            [(Symbol('placeholder')), {}],
            [(Symbol('placeholder')), {}],
            ['true', { name: 'true', toBytes: function () { return Uint8Array.from([]); }, fromBytes: function () { return ({ value: true, shift: 0 }); } }],
            ['false', { name: 'false', toBytes: function () { return Uint8Array.from([]); }, fromBytes: function () { return ({ value: true, shift: 0 }); } }],
        ])
    };
    txFields.data = {
        name: 'data',
        type: 'array',
        items: txFields.dataTxField
    };
    txFields.functionCall = {
        name: 'call',
        type: 'object',
        schema: [
            // special bytes to indicate function call. Used in Serde serializer
            {
                name: 'noName',
                toBytes: function () { return Uint8Array.from([9, 1]); },
                fromBytes: function () { return ({ value: undefined, shift: 2 }); }
            },
            {
                name: 'function',
                toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.STRING),
                fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_INT)
            },
            {
                name: 'args',
                type: 'array',
                toBytes: serializePrimitives_1.INT,
                fromBytes: parsePrimitives_1.P_INT,
                items: txFields.functionArgField
            }
        ]
    };
    txFields.payment = {
        name: 'payment',
        optional: true,
        withLength: true,
        type: 'object',
        schema: [
            txFields.amount,
            {
                name: 'assetId',
                toBytes: serializePrimitives_1.OPTION(serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE58_STRING)),
                fromBytes: parsePrimitives_1.P_OPTION(parsePrimitives_1.P_BASE58_VAR(parsePrimitives_1.P_SHORT))
            }
        ]
    };
})(txFields = exports.txFields || (exports.txFields = {}));
exports.orderSchemaV0 = {
    name: 'orderSchemaV0',
    type: 'object',
    schema: [
        txFields.senderPublicKey,
        __assign({}, txFields.senderPublicKey, { name: 'matcherPublicKey' }),
        {
            name: 'assetPair',
            type: 'object',
            schema: [
                txFields.base58Option32('amountAsset'),
                txFields.base58Option32('priceAsset')
            ]
        },
        {
            name: 'orderType',
            toBytes: function (type) { return serializePrimitives_1.BYTE(type === 'sell' ? 1 : 0); },
            fromBytes: function (bytes, start) {
                if (start === void 0) { start = 0; }
                return parsePrimitives_1.P_BYTE(bytes, start).value === 1 ?
                    { value: 'sell', shift: 1 } :
                    { value: 'buy', shift: 1 };
            }
        },
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.timestamp,
        txFields.longField('expiration'),
        txFields.longField('matcherFee')
    ]
};
exports.orderSchemaV2 = {
    name: 'orderSchemaV2',
    type: 'object',
    schema: [
        txFields.version,
        txFields.senderPublicKey,
        __assign({}, txFields.senderPublicKey, { name: 'matcherPublicKey' }),
        {
            name: 'assetPair',
            type: 'object',
            schema: [
                txFields.base58Option32('amountAsset'),
                txFields.base58Option32('priceAsset')
            ]
        },
        {
            name: 'orderType',
            toBytes: function (type) { return serializePrimitives_1.BYTE(type === 'sell' ? 1 : 0); },
            fromBytes: function (bytes, start) {
                if (start === void 0) { start = 0; }
                return parsePrimitives_1.P_BYTE(bytes, start).value === 1 ?
                    { value: 'sell', shift: 1 } :
                    { value: 'buy', shift: 1 };
            }
        },
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.timestamp,
        txFields.longField('expiration'),
        txFields.longField('matcherFee')
    ]
};
var aliasSchemaV2 = {
    name: 'aliasSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.alias,
        txFields.fee,
        txFields.timestamp
    ]
};
var burnSchemaV2 = {
    name: 'burnSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.quantity,
        txFields.fee,
        txFields.timestamp
    ]
};
var cancelLeaseSchemaV2 = {
    name: 'cancelLeaseSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.fee,
        txFields.timestamp,
        txFields.leaseId
    ]
};
var contractInvocationSchemaV1 = {
    name: 'contractInvocationSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        {
            name: 'contractAddress',
            toBytes: serializePrimitives_1.BASE58_STRING,
            fromBytes: parsePrimitives_1.P_BASE58_FIXED(26),
        },
        txFields.functionCall,
        txFields.payment,
        txFields.fee,
        txFields.timestamp,
    ]
};
var dataSchemaV1 = {
    name: 'dataSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.data,
        txFields.timestamp,
        txFields.fee
    ]
};
var exchangeSchemaV0 = {
    name: 'exchangeSchemaV0',
    type: 'object',
    schema: [
        txFields.type,
        __assign({}, exports.orderSchemaV0, { name: 'order1', withLength: true }),
        __assign({}, exports.orderSchemaV0, { name: 'order2', withLength: true }),
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.longField('buyMatcherFee'),
        txFields.longField('sellMatcherFee'),
        txFields.longField('fee'),
        txFields.longField('timestamp'),
    ]
};
var issueSchemaV2 = {
    name: 'issueSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetName,
        txFields.assetDescription,
        txFields.quantity,
        txFields.decimals,
        txFields.reissuable,
        txFields.fee,
        txFields.timestamp,
        txFields.script
    ]
};
var leaseSchemaV2 = {
    name: 'issueSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.leaseAssetId,
        txFields.senderPublicKey,
        txFields.recipient,
        txFields.amount,
        txFields.fee,
        txFields.timestamp
    ]
};
var massTransferSchemaV1 = {
    name: 'massTransferSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.optionalAssetId,
        txFields.transfers,
        txFields.timestamp,
        txFields.fee,
        txFields.attachment
    ]
};
var reissueSchemaV2 = {
    name: 'reissueSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.quantity,
        txFields.reissuable,
        txFields.fee,
        txFields.timestamp,
    ]
};
var setAssetScriptSchemaV1 = {
    name: 'setAssetScriptSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.fee,
        txFields.timestamp,
        txFields.script
    ]
};
var setScriptSchemaV1 = {
    name: 'setScriptSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.script,
        txFields.fee,
        txFields.timestamp
    ]
};
var sponsorshipSchemaV1 = {
    name: 'sponsorshipSchemaV1',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.assetId,
        txFields.longField('minSponsoredAssetFee'),
        txFields.fee,
        txFields.timestamp
    ]
};
var transferSchemaV2 = {
    name: 'transferSchemaV2',
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.optionalAssetId,
        __assign({}, txFields.optionalAssetId, { name: 'feeAssetId' }),
        txFields.timestamp,
        txFields.amount,
        txFields.fee,
        txFields.recipient,
        txFields.attachment
    ]
};
/**
 * Maps transaction types to schemas object. Schemas are written by keys. 0 - no version, n - version n
 */
exports.schemasByTypeMap = (_a = {},
    _a[TRANSACTION_TYPE.GENESIS] = {},
    _a[TRANSACTION_TYPE.PAYMENT] = {},
    _a[TRANSACTION_TYPE.ISSUE] = {
        2: issueSchemaV2
    },
    _a[TRANSACTION_TYPE.TRANSFER] = {
        2: transferSchemaV2
    },
    _a[TRANSACTION_TYPE.REISSUE] = {
        2: reissueSchemaV2
    },
    _a[TRANSACTION_TYPE.BURN] = {
        2: burnSchemaV2
    },
    _a[TRANSACTION_TYPE.EXCHANGE] = {
        0: exchangeSchemaV0
    },
    _a[TRANSACTION_TYPE.LEASE] = {
        2: leaseSchemaV2
    },
    _a[TRANSACTION_TYPE.CANCEL_LEASE] = {
        2: cancelLeaseSchemaV2
    },
    _a[TRANSACTION_TYPE.ALIAS] = {
        2: aliasSchemaV2
    },
    _a[TRANSACTION_TYPE.MASS_TRANSFER] = {
        1: massTransferSchemaV1
    },
    _a[TRANSACTION_TYPE.DATA] = {
        1: dataSchemaV1
    },
    _a[TRANSACTION_TYPE.SET_SCRIPT] = {
        1: setScriptSchemaV1
    },
    _a[TRANSACTION_TYPE.SPONSORSHIP] = {
        1: sponsorshipSchemaV1
    },
    _a[TRANSACTION_TYPE.SET_ASSET_SCRIPT] = {
        1: setAssetScriptSchemaV1
    },
    _a[TRANSACTION_TYPE.CONTRACT_INVOCATION] = {
        1: contractInvocationSchemaV1
    },
    _a);
//# sourceMappingURL=txSchemas.js.map