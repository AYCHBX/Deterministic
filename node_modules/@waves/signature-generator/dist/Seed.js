"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = require("./config/Config");
var index_1 = require("./index");
var dictionary_1 = require("./dictionary");
var Seed = /** @class */ (function () {
    function Seed(phrase) {
        if (phrase.length < Config_1.config.get('minimalSeedLength')) {
            throw new Error('Your seed length is less than allowed in config');
        }
        var keys = index_1.utils.crypto.buildKeyPair(phrase);
        this.phrase = phrase;
        this.address = index_1.utils.crypto.buildRawAddress(keys.publicKey);
        this.keyPair = {
            privateKey: index_1.libs.base58.encode(keys.privateKey),
            publicKey: index_1.libs.base58.encode(keys.publicKey)
        };
        Object.freeze(this);
        Object.freeze(this.keyPair);
    }
    Seed.prototype.encrypt = function (password, encryptionRounds) {
        return Seed.encryptSeedPhrase(this.phrase, password, encryptionRounds);
    };
    Seed.encryptSeedPhrase = function (seedPhrase, password, encryptionRounds) {
        if (encryptionRounds === void 0) { encryptionRounds = 5000; }
        if (password && password.length < 8) {
            // logger.warn('Your password may be too weak');
        }
        if (encryptionRounds < 1000) {
            // logger.warn('Encryption rounds may be too few');
        }
        if (seedPhrase.length < Config_1.config.get('minimalSeedLength')) {
            throw new Error('The seed phrase you are trying to encrypt is too short');
        }
        return index_1.utils.crypto.encryptSeed(seedPhrase, password, encryptionRounds);
    };
    Seed.decryptSeedPhrase = function (encryptedSeedPhrase, password, encryptionRounds) {
        if (encryptionRounds === void 0) { encryptionRounds = 5000; }
        var wrongPasswordMessage = 'The password is wrong';
        var phrase;
        try {
            phrase = index_1.utils.crypto.decryptSeed(encryptedSeedPhrase, password, encryptionRounds);
        }
        catch (e) {
            throw new Error(wrongPasswordMessage);
        }
        if (phrase === '' || phrase.length < Config_1.config.get('minimalSeedLength')) {
            throw new Error(wrongPasswordMessage);
        }
        return phrase;
    };
    Seed.create = function (words) {
        if (words === void 0) { words = 15; }
        var phrase = Seed._generateNewSeed(words);
        var minimumSeedLength = Config_1.config.get('minimalSeedLength');
        if (phrase.length < minimumSeedLength) {
            // If you see that error you should increase the number of words in the generated seed
            throw new Error("The resulted seed length is less than the minimum length (" + minimumSeedLength + ")");
        }
        return new Seed(phrase);
    };
    Seed.fromExistingPhrase = function (phrase) {
        var minimumSeedLength = Config_1.config.get('minimalSeedLength');
        if (phrase.length < minimumSeedLength) {
            // If you see that error you should increase the number of words or set it lower in the config
            throw new Error("The resulted seed length is less than the minimum length (" + minimumSeedLength + ")");
        }
        return new Seed(phrase);
    };
    Seed._generateNewSeed = function (length) {
        var random = index_1.utils.crypto.generateRandomUint32Array(length);
        var wordCount = dictionary_1.default.length;
        var phrase = [];
        for (var i = 0; i < length; i++) {
            var wordIndex = random[i] % wordCount;
            phrase.push(dictionary_1.default[wordIndex]);
        }
        random.set(new Uint8Array(random.length));
        return phrase.join(' ');
    };
    return Seed;
}());
exports.Seed = Seed;
//# sourceMappingURL=Seed.js.map