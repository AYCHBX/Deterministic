/// <reference types="node" />
import { ValidationResult } from './validation';
export declare type PUBLIC_KEY_TYPES = string | PublicKey | Uint8Array;
export declare type Option<T> = T | null | undefined;
export declare const publicKeyToString: (pk: PUBLIC_KEY_TYPES) => string;
export declare const ADDRESS_LENGTH = 26;
export declare const PUBLIC_KEY_LENGTH = 32;
export declare const PRIVATE_KEY_LENGTH = 32;
export declare const SIGNATURE_LENGTH = 64;
export declare function blake2b(input: Uint8Array): Uint8Array;
export declare function keccak(input: Uint8Array): Uint8Array;
export declare function sha256(input: Uint8Array): Uint8Array;
export declare const base58encode: (input: Uint8Array) => string;
export declare const base58decode: (input: string) => Uint8Array;
export interface PublicKey {
    public: string;
}
export interface PrivateKey {
    private: string;
}
export declare type KeyPair = PublicKey & PrivateKey;
export declare const keyPair: (seed: string) => KeyPair;
export declare const publicKey: (seed: string) => string;
export declare const privateKey: (seed: string) => string;
export declare const address: (keyOrSeed: string | PublicKey | KeyPair, chainId?: string) => string;
export declare const signBytes: (bytes: Uint8Array, seed: string) => string;
export declare const verifySignature: (publicKey: string, bytes: Uint8Array, signature: string) => boolean;
export declare function arraysEqual(a: any[] | Uint8Array, b: any[] | Uint8Array): boolean;
export declare const validateAddress: (addr: string, chainId?: string, publicKey?: string | PublicKey | undefined) => ValidationResult;
export declare const validatePublicKey: (publicKey: PUBLIC_KEY_TYPES) => ValidationResult;
export declare const hashBytes: (bytes: Uint8Array) => string;
export declare function randomUint8Array(length: number): Uint8Array;
export declare type serializer<T> = (value: T) => Uint8Array;
export declare const concat: (...arrays: (number[] | Uint8Array)[]) => Uint8Array;
export declare const empty: Uint8Array;
export declare const zero: Uint8Array;
export declare const one: Uint8Array;
export declare const BASE58_STRING: serializer<string>;
export declare const BASE64_STRING: serializer<string>;
export declare const STRING: serializer<Option<string>>;
export declare const BYTE: serializer<number>;
export declare const BOOL: serializer<boolean>;
export declare const BYTES: serializer<Uint8Array | Buffer | number[]>;
export declare const SHORT: serializer<number>;
export declare const INT: serializer<number>;
export declare const OPTION: <T, R = T | null | undefined>(s: serializer<T>) => serializer<R>;
export declare const LEN: (lenSerializer: serializer<number>) => <T>(valueSerializer: serializer<T>) => serializer<T>;
export declare const COUNT: (countSerializer: serializer<number>) => <T>(itemSerializer: serializer<T>) => (items: T[]) => Uint8Array;
export declare const LONG: serializer<number | string>;
