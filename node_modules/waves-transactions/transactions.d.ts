import { TypelessDataEntry } from "./transactions/data";
export declare enum TRANSACTION_TYPE {
    GENESIS = 1,
    PAYMENT = 2,
    ISSUE = 3,
    TRANSFER = 4,
    REISSUE = 5,
    BURN = 6,
    EXCHANGE = 7,
    LEASE = 8,
    CANCEL_LEASE = 9,
    ALIAS = 10,
    MASS_TRANSFER = 11,
    DATA = 12,
    SET_SCRIPT = 13,
    SPONSORSHIP = 14,
    SET_ASSET_SCRIPT = 15,
    CONTRACT_INVOCATION = 16
}
export declare enum DATA_FIELD_TYPE {
    INTEGER = "integer",
    BOOLEAN = "boolean",
    BINARY = "binary",
    STRING = "string"
}
export interface WithProofs {
    /**
     * ITransaction signatures
     * @minItems 0
     * @maxItems 8
     */
    proofs: string[];
}
export interface WithChainId {
    /**
     * Network byte.
     * E.g.,
     * 87 is used for Waves mainnet, 84 for Waves testnet
     */
    chainId: number;
}
export interface WithId {
    /**
     * Transaction ID. 32 bytes object hash encoded as base58 string
     */
    id: string;
}
/**
 * This interface has common fields for all transactions
 * @typeparam LONG Generic type representing LONG type. Default to string | number
 */
export interface ITransaction<LONG = string | number> extends WithProofs {
    type: number;
    timestamp: number;
    fee: LONG;
    version: number;
}
/**
 *
 */
export declare type TTx<LONG = string | number> = IAliasTransaction<LONG> | IIssueTransaction<LONG> | ITransferTransaction<LONG> | IReissueTransaction<LONG> | IBurnTransaction<LONG> | ILeaseTransaction<LONG> | ICancelLeaseTransaction<LONG> | IMassTransferTransaction<LONG> | ISetScriptTransaction<LONG> | IDataTransaction<LONG> | ISetAssetScriptTransaction<LONG> | IContractInvocationTransaction<LONG>;
export interface WithSender {
    senderPublicKey: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IIssueTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.ISSUE;
    name: string;
    description: string;
    decimals: number;
    quantity: LONG;
    reissuable: boolean;
    script?: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ISetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.SET_SCRIPT;
    script: string | null;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ISetAssetScriptTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.SET_ASSET_SCRIPT;
    assetId: string;
    script: string | null;
}
/**
 * Used to transfer assets from one account to another.
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ITransferTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender {
    type: TRANSACTION_TYPE.TRANSFER;
    recipient: string;
    amount: LONG;
    attachment: string;
    feeAssetId?: string | null;
    assetId?: string | null;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IMassTransferItem<LONG = string | number> {
    recipient: string;
    amount: LONG;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IReissueTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.REISSUE;
    assetId: string;
    quantity: LONG;
    reissuable: boolean;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IBurnTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.BURN;
    assetId: string;
    quantity: LONG;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ILeaseTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender {
    type: TRANSACTION_TYPE.LEASE;
    amount: LONG;
    recipient: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ICancelLeaseTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.CANCEL_LEASE;
    leaseId: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IAliasTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender {
    type: TRANSACTION_TYPE.ALIAS;
    alias: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IMassTransferTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender {
    type: TRANSACTION_TYPE.MASS_TRANSFER;
    transfers: IMassTransferItem<LONG>[];
    attachment: string;
    assetId?: string | null;
}
export interface DataEntry {
    key: string;
    type: DATA_FIELD_TYPE;
    value: string | number | boolean;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IDataTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender {
    type: TRANSACTION_TYPE.DATA;
    data: DataEntry[];
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IContractInvocationTransaction<LONG = string | number> extends ITransaction<LONG>, WithSender, WithChainId {
    type: TRANSACTION_TYPE.CONTRACT_INVOCATION;
    contractAddress: string;
    call: {
        function: string;
        args: any[];
    };
    payment?: {
        assetId?: string;
        amount: LONG;
    };
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IOrder<LONG = string | number> extends WithSender, WithProofs {
    version?: number;
    orderType: 'buy' | 'sell';
    assetPair: {
        amountAsset?: string;
        priceAsset?: string;
    };
    price: LONG;
    amount: LONG;
    timestamp: number;
    expiration: number;
    matcherFee: number;
    matcherPublicKey: string;
}
export interface ICancelOrder extends WithSender {
    sender: string;
    orderId: string;
    timestamp: number;
    signature: string;
}
export declare type TTxParams<LONG = string | number> = IAliasParams<LONG> | IBurnParams<LONG> | IContractInvocationParams<LONG> | ICancelLeaseParams<LONG> | IDataParams<LONG> | IIssueParams<LONG> | ILeaseParams<LONG> | IMassTransferParams<LONG> | IReissueParams<LONG> | ISetAssetScriptParams<LONG> | ISetScriptParams<LONG> | ITransferParams<LONG>;
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IBasicParams<LONG = string | number> {
    /**
     * Transaction fee. If not set, fee will be calculated automatically
     */
    fee?: LONG;
    /**
     * If fee is not set, this value will be added to automatically calculated fee. E.x.:
     * Account is scripted and 400000 fee more is required.
     */
    additionalFee?: number;
    /**
     * If not set, public key will be derived from seed phrase. You should provide senderPublicKey in two cases:
     * 1. Account, from which this tx should be sent, differs from tx signer. E.g., we have smart account that requires 2 signatures.
     * 2. You want only to create tx, not to sign it. Therefore no seed is provided.
     */
    senderPublicKey?: string;
    /**
     * Transaction timestamp. If not set current timestamp will be used. Date.now()
     */
    timestamp?: number;
}
export interface WithChainIdParam {
    /**
     * Network byte. Could beb set as number or as char.
     * If set as char(string), charCodeAt(0) will be used. E.g.,
     * 'W' will be converted to '87'
     * If not set, 87 will be used as default
     */
    chainId?: string | number;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IAliasParams<LONG = string | number> extends IBasicParams<LONG> {
    alias: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IBurnParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    assetId: string;
    quantity: LONG;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ICancelLeaseParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    leaseId: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IDataParams<LONG = string | number> extends IBasicParams<LONG> {
    data: Array<DataEntry | TypelessDataEntry>;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IIssueParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    name: string;
    description: string;
    quantity: LONG;
    decimals?: number;
    reissuable?: boolean;
    script?: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ILeaseParams<LONG = string | number> extends IBasicParams<LONG> {
    recipient: string;
    amount: LONG;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IMassTransferParams<LONG = string | number> extends IBasicParams<LONG> {
    transfers: IMassTransferItem[];
    /**
     * Bytearray encoded as base string
     */
    attachment?: string;
    assetId?: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IOrderParams<LONG = string | number> {
    matcherPublicKey: string;
    price: LONG;
    amount: LONG;
    orderType: 'buy' | 'sell';
    amountAsset?: string;
    priceAsset?: string;
    senderPublicKey?: string;
    matcherFee?: number;
    timestamp?: number;
    expiration?: number;
}
export interface ICancelOrderParams extends Partial<WithSender> {
    orderId: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IReissueParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    assetId: string;
    quantity: LONG;
    reissuable: boolean;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ISetAssetScriptParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    script: string;
    assetId: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ISetScriptParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    script: string | null;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface ITransferParams<LONG = string | number> extends IBasicParams<LONG> {
    recipient: string;
    amount: LONG;
    /**
     * Bytearray encoded as base string
     */
    attachment?: string;
    feeAssetId?: string;
    assetId?: string;
}
/**
 * @typeparam LONG Generic type representing LONG type. Default to string | number. Since javascript number more than 2 ** 53 -1 cannot be precisely represented, generic type is used
 */
export interface IContractInvocationParams<LONG = string | number> extends IBasicParams<LONG>, WithChainIdParam {
    contractAddress: string;
    call: {
        function: string;
        args: {
            type: 'binary' | 'long' | 'boolean' | 'string';
            value: string | number | boolean;
        }[];
    };
    payment?: {
        assetId?: string;
        amount: LONG;
    };
}
