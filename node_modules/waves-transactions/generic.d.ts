import { WithProofs } from './transactions';
import { SeedsAndIndexes, SeedTypes, Params, Option } from './types';
export declare function getSenderPublicKey(seed: Option<SeedTypes>, params: Params): string;
export declare const base64Prefix: (str: string | null) => string | null;
export declare type OneOrMany<T> = T | T[];
export declare function addProof(tx: WithProofs, proof: string, index?: number): WithProofs;
export declare const valOrDef: <T, K extends T>(val: Option<T>, def: K) => T;
export declare const isSeedsAndIndexes: (seed: SeedTypes) => seed is SeedsAndIndexes;
export declare const isArrayOfSeeds: (seed: SeedTypes) => seed is Option<string>[];
export declare const mapSeed: <T>(seed: Option<SeedTypes>, map: (seed: string, index?: number | undefined) => T) => Option<T>;
export declare const pullSeedAndIndex: (seed: Option<SeedTypes>) => {
    seed?: string | undefined;
    index?: number | undefined;
    nextSeed?: string | SeedsAndIndexes | Option<string>[] | undefined;
};
