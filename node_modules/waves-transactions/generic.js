"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const waves_crypto_1 = require("waves-crypto");
function getSenderPublicKey(seed, params) {
    const { seed: s } = exports.pullSeedAndIndex(seed);
    if (s == null && params.senderPublicKey == null)
        throw new Error('Please provide either seed or senderPublicKey');
    else {
        return params.senderPublicKey || waves_crypto_1.publicKey(s);
    }
}
exports.getSenderPublicKey = getSenderPublicKey;
exports.base64Prefix = (str) => str == null || str.slice(0, 7) === 'base64:' ? str : 'base64:' + str;
//export const isOne = <T>(oneOrMany: OneOrMany<T>): oneOrMany is T => !Array.isArray(oneOrMany)
//export const toMany = <T>(oneOrMany: OneOrMany<T>): T[] => isOne(oneOrMany) ? [oneOrMany] : oneOrMany
function addProof(tx, proof, index) {
    if (index == null) {
        tx.proofs = [...tx.proofs, proof];
        return tx;
    }
    if (tx.proofs != null && !!tx.proofs[index])
        throw new Error(`Proof at index ${index} is already exists.`);
    for (let i = tx.proofs.length; i < index; i++)
        tx.proofs.push('');
    tx.proofs[index] = proof;
    return tx;
}
exports.addProof = addProof;
exports.valOrDef = (val, def) => val != null ? val : def;
exports.isSeedsAndIndexes = (seed) => typeof seed !== 'string' && typeof seed === 'object' && seed.length === undefined;
exports.isArrayOfSeeds = (seed) => typeof seed !== 'string' && typeof seed === 'object' && seed.length !== undefined;
exports.mapSeed = (seed, map) => {
    const { seed: _seed, index } = exports.pullSeedAndIndex(seed);
    if (_seed != null)
        return map(_seed, index);
    return undefined;
};
exports.pullSeedAndIndex = (seed) => {
    const empty = { seed: undefined, index: undefined, nextSeed: undefined };
    if (seed == null || seed === '')
        return empty;
    if (exports.isSeedsAndIndexes(seed)) {
        const keys = Object.keys(seed).map(k => parseInt(k)).filter(k => !isNaN(k));
        if (keys == null || keys.length === 0)
            return empty;
        const index = keys[0];
        const newSeed = Object.assign({}, seed);
        delete newSeed[index];
        return { seed: seed[keys[0]], index, nextSeed: Object.keys(newSeed).length > 0 ? newSeed : undefined };
    }
    else if (exports.isArrayOfSeeds(seed)) {
        return exports.pullSeedAndIndex(Object.entries(seed).filter(([k, v]) => !!v).reduce((acc, [k, v]) => (Object.assign({}, acc, { [k]: v })), {}));
    }
    return { seed: seed };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsK0NBQXdDO0FBRXhDLFNBQWdCLGtCQUFrQixDQUFDLElBQXVCLEVBQUUsTUFBYztJQUN4RSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLHdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsZUFBZSxJQUFJLElBQUk7UUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO1NBQzdEO1FBQ0gsT0FBTyxNQUFNLENBQUMsZUFBZSxJQUFJLHdCQUFTLENBQUMsQ0FBRSxDQUFDLENBQUE7S0FDL0M7QUFDSCxDQUFDO0FBUkQsZ0RBUUM7QUFFWSxRQUFBLFlBQVksR0FBRyxDQUFDLEdBQWtCLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUE7QUFJdkgsZ0dBQWdHO0FBQ2hHLHVHQUF1RztBQUV2RyxTQUFnQixRQUFRLENBQUMsRUFBYyxFQUFFLEtBQWEsRUFBRSxLQUFjO0lBQ3BFLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtRQUNqQixFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2pDLE9BQU8sRUFBRSxDQUFBO0tBQ1Y7SUFDRCxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixL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