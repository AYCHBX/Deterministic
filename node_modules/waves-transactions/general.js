"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const transactions_1 = require("./transactions");
const issue_1 = require("./transactions/issue");
const transfer_1 = require("./transactions/transfer");
const reissue_1 = require("./transactions/reissue");
const burn_1 = require("./transactions/burn");
const lease_1 = require("./transactions/lease");
const cancel_lease_1 = require("./transactions/cancel-lease");
const data_1 = require("./transactions/data");
const mass_transfer_1 = require("./transactions/mass-transfer");
const alias_1 = require("./transactions/alias");
const set_script_1 = require("./transactions/set-script");
const order_1 = require("./transactions/order");
const txToJson_1 = require("./txToJson");
const set_asset_script_1 = require("./transactions/set-asset-script");
exports.txTypeMap = {
    [transactions_1.TransactionType.Issue]: { sign: (x, seed) => issue_1.issue(x, seed), serialize: (x) => issue_1.issueToBytes(x) },
    [transactions_1.TransactionType.Transfer]: { sign: (x, seed) => transfer_1.transfer(x, seed), serialize: (x) => transfer_1.transferToBytes(x) },
    [transactions_1.TransactionType.Reissue]: { sign: (x, seed) => reissue_1.reissue(x, seed), serialize: (x) => reissue_1.reissueToBytes(x) },
    [transactions_1.TransactionType.Burn]: { sign: (x, seed) => burn_1.burn(x, seed), serialize: (x) => burn_1.burnToBytes(x) },
    [transactions_1.TransactionType.Lease]: { sign: (x, seed) => lease_1.lease(x, seed), serialize: (x) => lease_1.leaseToBytes(x) },
    [transactions_1.TransactionType.CancelLease]: { sign: (x, seed) => cancel_lease_1.cancelLease(x, seed), serialize: (x) => cancel_lease_1.cancelLeaseToBytes(x) },
    [transactions_1.TransactionType.Alias]: { sign: (x, seed) => alias_1.alias(x, seed), serialize: (x) => alias_1.aliasToBytes(x) },
    [transactions_1.TransactionType.MassTransfer]: { sign: (x, seed) => mass_transfer_1.massTransfer(x, seed), serialize: (x) => mass_transfer_1.massTransferToBytes(x) },
    [transactions_1.TransactionType.Data]: { sign: (x, seed) => data_1.data(x, seed), serialize: (x) => data_1.dataToBytes(x) },
    [transactions_1.TransactionType.SetScript]: { sign: (x, seed) => set_script_1.setScript(x, seed), serialize: (x) => set_script_1.setScriptToBytes(x) },
    [transactions_1.TransactionType.SetAssetScript]: { sign: (x, seed) => set_asset_script_1.setAssetScript(x, seed), serialize: (x) => set_asset_script_1.setAssetScriptToBytes(x) },
};
exports.signTx = (tx, seed) => {
    if (!exports.txTypeMap[tx.type])
        throw new Error(`Unknown tx type: ${tx.type}`);
    return exports.txTypeMap[tx.type].sign(tx, seed);
};
exports.serialize = (obj) => {
    if (order_1.isOrder(obj))
        return order_1.orderToBytes(obj);
    if (!exports.txTypeMap[obj.type])
        throw new Error(`Unknown tx type: ${obj.type}`);
    return exports.txTypeMap[obj.type].serialize(obj);
};
exports.broadcast = (tx, apiBase) => axios_1.default.post('transactions/broadcast', txToJson_1.txToJson(tx), { baseURL: apiBase, headers: { 'content-type': 'application/json' } })
    .then(x => x.data)
    .catch(e => Promise.reject(e.response && e.response.status === 400 ? new Error(e.response.data.message) : e));
exports.delay = (timeout) => {
    const t = {};
    const p = new Promise((resolve, _) => {
        t.resolve = resolve;
        t.id = setTimeout(() => resolve(), timeout);
    });
    p.cancel = () => { t.resolve(); clearTimeout(t.id); };
    return p;
};
exports.waitForTx = (txId, timeout, apiBase) => __awaiter(this, void 0, void 0, function* () {
    const promise = () => axios_1.default.get(`transactions/info/${txId}`, { baseURL: apiBase })
        .then(x => x.data).catch(_ => exports.delay(1000).then(_ => promise()));
    const t = exports.delay(timeout);
    const r = yield Promise.race([t.then(x => Promise.reject('timeout')), promise()]);
    t.cancel();
    return r;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBeUI7QUFDekIsaURBZXVCO0FBRXZCLGdEQUEwRDtBQUMxRCxzREFBbUU7QUFDbkUsb0RBQWdFO0FBQ2hFLDhDQUF1RDtBQUN2RCxnREFBMEQ7QUFDMUQsOERBQTZFO0FBQzdFLDhDQUF1RDtBQUN2RCxnRUFBZ0Y7QUFDaEYsZ0RBQTBEO0FBQzFELDBEQUF1RTtBQUN2RSxnREFBNEQ7QUFDNUQseUNBQXFDO0FBQ3JDLHNFQUF3RjtBQUkzRSxRQUFBLFNBQVMsR0FBdUg7SUFDM0ksQ0FBQyw4QkFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsYUFBSyxDQUFDLENBQXFCLEVBQUUsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxvQkFBWSxDQUFDLENBQXFCLENBQUMsRUFBRTtJQUN6SSxDQUFDLDhCQUFlLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxtQkFBUSxDQUFDLENBQXdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQywwQkFBZSxDQUFDLENBQXdCLENBQUMsRUFBRTtJQUN4SixDQUFDLDhCQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBTyxDQUFDLENBQXVCLEVBQUUsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx3QkFBYyxDQUFDLENBQXVCLENBQUMsRUFBRTtJQUNuSixDQUFDLDhCQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxXQUFJLENBQUMsQ0FBb0IsRUFBRSxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFXLENBQUMsQ0FBb0IsQ0FBQyxFQUFFO0lBQ3BJLENBQUMsOEJBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGFBQUssQ0FBQyxDQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQVksQ0FBQyxDQUFxQixDQUFDLEVBQUU7SUFDekksQ0FBQyw4QkFBZSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsMEJBQVcsQ0FBQyxDQUEyQixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsaUNBQWtCLENBQUMsQ0FBMkIsQ0FBQyxFQUFFO0lBQ3ZLLENBQUMsOEJBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGFBQUssQ0FBQyxDQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsb0JBQVksQ0FBQyxDQUFxQixDQUFDLEVBQUU7SUFDekksQ0FBQyw4QkFBZSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsNEJBQVksQ0FBQyxDQUE0QixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsbUNBQW1CLENBQUMsQ0FBNEIsQ0FBQyxFQUFFO0lBQzVLLENBQUMsOEJBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLFdBQUksQ0FBQyxDQUFvQixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVcsQ0FBQyxDQUFvQixDQUFDLEVBQUU7SUFDcEksQ0FBQyw4QkFBZSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsc0JBQVMsQ0FBQyxDQUF5QixFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsNkJBQWdCLENBQUMsQ0FBeUIsQ0FBQyxFQUFFO0lBQzdKLENBQUMsOEJBQWUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGlDQUFjLENBQUMsQ0FBOEIsRUFBRSxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLHdDQUFxQixDQUFDLENBQThCLENBQUMsRUFBRTtDQUN2TCxDQUFBO0FBRVksUUFBQSxNQUFNLEdBQUcsQ0FBQyxFQUFNLEVBQUUsSUFBZSxFQUFNLEVBQUU7SUFDcEQsSUFBSSxDQUFDLGlCQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRXZFLE9BQU8saUJBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUMxQyxDQUFDLENBQUE7QUFFWSxRQUFBLFNBQVMsR0FBRyxDQUFDLEdBQWUsRUFBYyxFQUFFO0lBQ3ZELElBQUksZUFBTyxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sb0JBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMxQyxJQUFJLENBQUMsaUJBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7SUFFekUsT0FBTyxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFBO0FBRVksUUFBQSxTQUFTLEdBQUcsQ0FBQyxFQUFNLEVBQUUsT0FBZSxFQUFFLEVBQUUsQ0FDbkQsZUFBSyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO0tBQ3RILElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7S0FDakIsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFHcEcsUUFBQSxLQUFLLEdBQUcsQ0FBQyxPQUFlLEVBQTBCLEVBQUU7SUFDL0QsTUFBTSxDQUFDLEdBQVEsRUFBRSxDQUFBO0lBQ2pCLE1BQU0sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ25CLENBQUMsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzdDLENBQUMsQ0FBUSxDQUFBO0lBQ0gsQ0FBRSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBO0lBQzNELE9BQU8sQ0FBQyxDQUFBO0FBQ1YsQ0FBQyxDQUFBO0FBRVksUUFBQSxTQUFTLEdBQUcsQ0FBTyxJQUFZLEVBQUUsT0FBZSxFQUFFLE9BQWUsRUFBZSxFQUFFO0lBQzdGLE1BQU0sT0FBTyxHQUFHLEdBQWdCLEVBQUUsQ0FBQyxlQUFLLENBQUMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUM1RixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVqRSxNQUFNLENBQUMsR0FBRyxhQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDeEIsTUFBTSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFPLENBQUE7SUFDdkYsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ1YsT0FBTyxDQUFDLENBQUE7QUFDVixDQUFDLENBQUEsQ0FBQSJ9