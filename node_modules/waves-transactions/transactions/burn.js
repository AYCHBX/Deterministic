"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const schemas_1 = require("../schemas");
const validation_2 = require("waves-crypto/validation");
exports.burnValidation = (tx) => [
    validation_2.noError,
];
exports.burnToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.Burn, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.BASE58_STRING(tx.assetId), waves_crypto_1.LONG(tx.quantity), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp));
/**
 * Creates and signs [[BurnTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[BurnTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { burn } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   assetId: '4uK8i4ThRGbehENwa6MxyLtxAjAo1Rj9fduborGExarC',
 *   quantity: 100,
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W',
 * }
 *
 * const signedBurnTx = burn(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "548rzUHdDQwq5EfCe43Mp45QvBFwPwqMhxH25q85UWet",
 *   "type": 6,
 *   "version": 2,
 *   "chainId": "W",
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926582,
 *   "proofs": [
 *     "3Z8sH3Hfmye21kvL7cc4oCUZLPqdsREsDeBHNYwavmgd4wL5iQy4SEbMW9Nnak8C6QDWtjePi2g3NuxgGTfZ8Awh"
 *   ],
 *   "assetId": "4uK8i4ThRGbehENwa6MxyLtxAjAo1Rj9fduborGExarC",
 *   "quantity": 100
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function burn(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.Burn, version: 2, chainId: 'W', fee: 100000, senderPublicKey, timestamp: Date.now(), proofs: [], id: '' }, paramsOrTx);
    validation_1.raiseValidationErrors(validation_1.generalValidation(tx, schemas_1.validators.BurnTransaction), exports.burnValidation(tx));
    const bytes = exports.burnToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? burn(tx, nextSeed) : tx;
}
exports.burn = burn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvYnVybi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUF3RTtBQUN4RSwrQ0FBdUY7QUFDdkYsd0NBQW9GO0FBRXBGLDhDQUF3RTtBQUN4RSx3Q0FBdUM7QUFDdkMsd0RBQW1FO0FBV3RELFFBQUEsY0FBYyxHQUFHLENBQUMsRUFBbUIsRUFBb0IsRUFBRSxDQUFDO0lBQ3ZFLG9CQUFPO0NBQ1IsQ0FBQTtBQUVZLFFBQUEsV0FBVyxHQUFHLENBQUMsRUFBbUIsRUFBYyxFQUFFLENBQUMscUJBQU0sQ0FDcEUsb0JBQUssQ0FBQyxDQUFDLDhCQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuRSw0QkFBYSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFDakMsNEJBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQ3pCLG1CQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUNqQixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDbkIsQ0FBQTtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRDRztBQUNILFNBQWdCLElBQUksQ0FBQyxVQUF3QyxFQUFFLElBQWdCO0lBQzdFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUUzQyxNQUFNLGVBQWUsR0FBRyw0QkFBa0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFFNUQsTUFBTSxFQUFFLG1CQUNOLElBQUksRUFBRSw4QkFBZSxDQUFDLElBQUksRUFDMUIsT0FBTyxFQUFFLENBQUMsRUFDVixPQUFPLEVBQUUsR0FBRyxFQUNaLEdBQUcsRUFBRSxNQUFNLEVBQ1gsZUFBZSxFQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ3JCLE1BQU0sRUFBRSxFQUFFLEVBQ1YsRUFBRSxFQUFFLEVBQUUsSUFDSCxVQUFVLENBQ2QsQ0FBQTtJQUVELGtDQUFxQixDQUNuQiw4QkFBaUIsQ0FBQyxFQUFFLEVBQUUsb0JBQVUsQ0FBQyxlQUFlLENBQUMsRUFDakQsc0JBQWMsQ0FBQyxFQUFFLENBQUMsQ0FDbkIsQ0FBQTtJQUVELE1BQU0sS0FBSyxHQUFHLG1CQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFN0IsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLEVBQUUsRUFBRSx3QkFBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdELEVBQUUsQ0FBQyxFQUFFLEdBQUcsd0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN4QixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQzNDLENBQUM7QUEzQkQsb0JBMkJDIn0=