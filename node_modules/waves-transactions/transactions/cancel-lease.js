"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const schemas_1 = require("../schemas");
exports.cancelLeaseValidation = (tx) => [];
exports.cancelLeaseToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.CancelLease, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp), waves_crypto_1.BASE58_STRING(tx.leaseId));
/**
 * Creates and signs [[CancelLeaseTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[CancelLeaseTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { cancelLease } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   leaseId: '2fYhSNrXpyKgbtHzh5tnpvnQYuL7JpBFMBthPSGFrqqg',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W'
 * }
 *
 * const signedCancelLeaseTx = cancelLease(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "2LBjRAviJu8B9Kjdw5D582AsLcZJu6UPsuAGCJ3QYJgw",
 *   "type": 9,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926616,
 *   "chainId": "W",
 *   "proofs": [
 *     "3j64VHFfM3F3gL97mxmDzhX8HHcbHS8vZEuzY96vGoRURPkgaqT1AZyUD9ToWZ4HdVCi15tS7nrAcDiA4zUamj1N"
 *   ],
 *   "leaseId": "2fYhSNrXpyKgbtHzh5tnpvnQYuL7JpBFMBthPSGFrqqg"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function cancelLease(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.CancelLease, version: 2, fee: 100000, senderPublicKey, timestamp: Date.now(), chainId: 'W', proofs: [], id: '' }, paramsOrTx);
    validation_1.raiseValidationErrors(validation_1.generalValidation(tx, schemas_1.validators.CancelLeaseTransaction), exports.cancelLeaseValidation(tx));
    const bytes = exports.cancelLeaseToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? cancelLease(tx, nextSeed) : tx;
}
exports.cancelLease = cancelLease;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLWxlYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RyYW5zYWN0aW9ucy9jYW5jZWwtbGVhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBK0U7QUFDL0UsK0NBQXVGO0FBQ3ZGLHdDQUFvRjtBQUdwRiw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBUzFCLFFBQUEscUJBQXFCLEdBQUcsQ0FBQyxFQUEwQixFQUFvQixFQUFFLENBQUMsRUFFdEYsQ0FBQTtBQUVZLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxFQUEwQixFQUFjLEVBQUUsQ0FBQyxxQkFBTSxDQUNsRixvQkFBSyxDQUFDLENBQUMsOEJBQWUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzFFLDRCQUFhLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUNqQyxtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFDbEIsNEJBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQzFCLENBQUE7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMENHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLFVBQXNELEVBQUUsSUFBZ0I7SUFDbEcsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLDBCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTNDLE1BQU0sZUFBZSxHQUFHLDRCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUU1RCxNQUFNLEVBQUUsbUJBQ0osSUFBSSxFQUFFLDhCQUFlLENBQUMsV0FBVyxFQUNqQyxPQUFPLEVBQUUsQ0FBQyxFQUNWLEdBQUcsRUFBQyxNQUFNLEVBQ1YsZUFBZSxFQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ3JCLE9BQU8sRUFBRSxHQUFHLEVBQ1osTUFBTSxFQUFFLEVBQUUsRUFDVixFQUFFLEVBQUUsRUFBRSxJQUNMLFVBQVUsQ0FDWixDQUFBO0lBRUgsa0NBQXFCLENBQ25CLDhCQUFpQixDQUFDLEVBQUUsRUFBRSxvQkFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3hELDZCQUFxQixDQUFDLEVBQUUsQ0FBQyxDQUMxQixDQUFBO0lBRUQsTUFBTSxLQUFLLEdBQUcsMEJBQWtCLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFcEMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLEVBQUUsRUFBRSx3QkFBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdELEVBQUUsQ0FBQyxFQUFFLEdBQUcsd0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN4QixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ2xELENBQUM7QUEzQkQsa0NBMkJDIn0=