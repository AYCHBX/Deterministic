import { LeaseTransaction, long } from '../transactions';
import { SeedTypes, Params } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface LeaseParams extends Params {
    recipient: string;
    amount: long;
    fee?: long;
    timestamp?: number;
}
export declare const leaseValidation: (tx: LeaseTransaction) => ValidationResult;
export declare const leaseToBytes: (tx: LeaseTransaction) => Uint8Array;
/**
 * Creates and signs [[LeaseTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[LeaseTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { lease } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   amount: 100,
 *   recipient: '3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 * }
 *
 * const signedLeaseTx = lease(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "DZqFQ6dRK4BDzMita1tQKa1q6PT3usPTmFwViMkdyi4Y",
 *   "type": 8,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926694,
 *   "proofs": [
 *     "5sV8pS6ZJiRgP8miARCAiSASSm2tmoUUjwfJTYUryCkGhHHmSbyFJhEMd24RPJfCGsMSaJSVwhZkcXUL3XoMoARb"
 *   ],
 *   "amount": 100,
 *   "recipient": "3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function lease(paramsOrTx: LeaseParams | LeaseTransaction, seed?: SeedTypes): LeaseTransaction;
