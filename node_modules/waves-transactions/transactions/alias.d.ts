import { IAliasParams, IAliasTransaction, WithId, WithSender } from '../transactions';
import { TSeedTypes } from '../types';
/**
 * Creates and signs [[IAliasTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[IAliasTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { alias } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   alias: 'MyNewAlias',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W',
 * }
 *
 * const signedAliasTx = alias(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "CMypY56Zv26CZGwGv8wi5G8fYvrWC5a4SXgkw8awyYaW",
 *   "type": 10,
 *   "version": 2,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "alias": "MyNewAlias",
 *   "fee": 100000,
 *   "timestamp": 1547021917151,
 *   "proofs": [
 *     "5oZQvKcCf28ohS8wazXBM6hXD153HbSk8hpxvj4dzxf1pGAjNC8W3j2RcLy1djM8DPcPMHcxuoxgEQBQjC4GCpfA"
 *   ]
 * }
 * ```
 *
 */
export declare function alias(params: IAliasParams, seed: TSeedTypes): IAliasTransaction & WithId;
export declare function alias(paramsOrTx: IAliasParams & WithSender | IAliasTransaction, seed?: TSeedTypes): IAliasTransaction & WithId;
