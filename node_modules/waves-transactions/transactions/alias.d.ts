import { AliasTransaction, long } from '../transactions';
import { SeedTypes, Params } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface AliasParams extends Params {
    alias: string;
    fee?: long;
    timestamp?: number;
    chainId?: string;
}
export declare const aliasValidation: (tx: AliasTransaction) => ValidationResult;
export declare const aliasToBytes: (tx: AliasTransaction) => Uint8Array;
/**
 * Creates and signs [[AliasTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[AliasTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { alias } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   alias: 'MyNewAlias',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W',
 * }
 *
 * const signedAliasTx = alias(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "DWhcVAbj6By4HRtEceuMLRp4TUXZ1rg3TvJgZPadJnK1",
 *   "type": 10,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926756,
 *   "proofs": [
 *     "5hFwgio5eVWZLVzEsdmr62QtJvTJKAkEofvcnyviAAmBMDNrzX5ZuPpXgyMDrA5drMtUYbFmbUYVzWCZNuxowUMC"
 *   ],
 *   "alias": "MyNewAlias"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function alias(paramsOrTx: AliasParams | AliasTransaction, seed?: SeedTypes): AliasTransaction;
