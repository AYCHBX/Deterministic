"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const generic_1 = require("../generic");
const validation_1 = require("waves-crypto/validation");
const waves_crypto_1 = require("waves-crypto");
const validation_2 = require("../validation");
const schemas_1 = require("../schemas");
exports.massTransferValidation = (tx) => [
    validation_1.noError,
];
exports.massTransferToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTE(transactions_1.TransactionType.MassTransfer), waves_crypto_1.BYTE(1), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.OPTION(waves_crypto_1.BASE58_STRING)(tx.assetId), waves_crypto_1.COUNT(waves_crypto_1.SHORT)((x) => waves_crypto_1.concat(waves_crypto_1.BASE58_STRING(x.recipient), waves_crypto_1.LONG(x.amount)))(tx.transfers), waves_crypto_1.LONG(tx.timestamp), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(tx.attachment));
/**
 * Creates and signs [[MassTransferTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[MassTransferTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { massTransfer } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   transfers: [
 *     {
 *       amount: 100,
 *       recipient: '3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs',
 *     },
 *     {
 *       amount: 200,
 *       recipient: '3PPnqZznWJbPG2Z1Y35w8tZzskiq5AMfUXr',
 *     },
 *   ],
 *   //timestamp: Date.now(),
 *   //fee: 100000 + transfers.length * 50000,
 * }
 *
 * const signedMassTransferTx = massTransfer(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "35uNumuZsWNcXRSemRDzTTaeYyhQL9CVPCkNL4hJcqAU",
 *   "type": 11,
 *   "version": 1,
 *   "fee": 200000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926707,
 *   "proofs": [
 *     "5HRHX7fEh8dWcHiN8oXRGrhvZ69NdqS5LByFGoSD5TfU31mAB931fqVaKqL7jmTvZEf6aYMPLELsmUnKNVMwMr1X"
 *   ],
 *   "transfers": [
 *     {
 *       "amount": 100,
 *       "recipient": "3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs"
 *     },
 *     {
 *       "amount": 200,
 *       "recipient": "3PPnqZznWJbPG2Z1Y35w8tZzskiq5AMfUXr"
 *     }
 *   ]
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function massTransfer(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    if (!Array.isArray(paramsOrTx.transfers))
        throw new Error('["transfers should be array"]');
    const tx = Object.assign({ type: transactions_1.TransactionType.MassTransfer, version: 1, fee: (100000 + Math.ceil(0.5 * paramsOrTx.transfers.length) * 100000), senderPublicKey, timestamp: Date.now(), proofs: [], id: '' }, paramsOrTx);
    validation_2.raiseValidationErrors(validation_2.generalValidation(tx, schemas_1.validators.MassTransferTransaction), exports.massTransferValidation(tx));
    const bytes = exports.massTransferToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? massTransfer(tx, nextSeed) : tx;
}
exports.massTransfer = massTransfer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzcy10cmFuc2Zlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvbWFzcy10cmFuc2Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUEwRjtBQUMxRix3Q0FBb0Y7QUFFcEYsd0RBQW1FO0FBQ25FLCtDQVlxQjtBQUNyQiw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBVTFCLFFBQUEsc0JBQXNCLEdBQUcsQ0FBQyxFQUEyQixFQUFvQixFQUFFLENBQUM7SUFDdkYsb0JBQU87Q0FDUixDQUFBO0FBRVksUUFBQSxtQkFBbUIsR0FBRyxDQUFDLEVBQTJCLEVBQWMsRUFBRSxDQUFDLHFCQUFNLENBQ3BGLG1CQUFJLENBQUMsOEJBQWUsQ0FBQyxZQUFZLENBQUMsRUFDbEMsbUJBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCw0QkFBYSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFDakMscUJBQU0sQ0FBQyw0QkFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUNqQyxvQkFBSyxDQUFDLG9CQUFLLENBQUMsQ0FBQyxDQUFDLENBQVcsRUFBRSxFQUFFLENBQUMscUJBQU0sQ0FBQyw0QkFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxtQkFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUMvRixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFDbEIsbUJBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQ1osa0JBQUcsQ0FBQyxvQkFBSyxDQUFDLENBQUMscUJBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FDbEMsQ0FBQTtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMERHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLFVBQXdELEVBQUUsSUFBZ0I7SUFDckcsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLDBCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTNDLE1BQU0sZUFBZSxHQUFHLDRCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUU1RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQUcsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO0lBRTNGLE1BQU0sRUFBRSxtQkFDTixJQUFJLEVBQUUsOEJBQWUsQ0FBQyxZQUFZLEVBQ2xDLE9BQU8sRUFBRSxDQUFDLEVBQ1YsR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQ3JFLGVBQWUsRUFDZixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNyQixNQUFNLEVBQUUsRUFBRSxFQUNWLEVBQUUsRUFBRSxFQUFFLElBQ0gsVUFBVSxDQUNkLENBQUE7SUFFRCxrQ0FBcUIsQ0FDbkIsOEJBQWlCLENBQUMsRUFBRSxFQUFFLG9CQUFVLENBQUMsdUJBQXVCLENBQUMsRUFDekQsOEJBQXNCLENBQUMsRUFBRSxDQUFDLENBQzNCLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBRywyQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVyQyxpQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFRLENBQUMsRUFBRSxFQUFFLHdCQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0QsRUFBRSxDQUFDLEVBQUUsR0FBRyx3QkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDbkQsQ0FBQztBQTVCRCxvQ0E0QkMifQ==