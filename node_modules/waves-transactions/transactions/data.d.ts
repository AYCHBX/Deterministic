/// <reference types="node" />
import { DataTransaction, DataEntry, long } from '../transactions';
import { Params, SeedTypes } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface TypelessDataEntry {
    key: string;
    value: string | number | boolean | Buffer | Uint8Array | number[];
}
export interface DataParams extends Params {
    data: Array<DataEntry | TypelessDataEntry>;
    fee?: long;
    timestamp?: number;
}
export declare const dataValidation: (tx: DataTransaction) => ValidationResult;
export declare const dataToBytes: (tx: DataTransaction) => Uint8Array;
/**
 * Creates and signs [[DataTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[DataTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { data } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   data: [
 *     { key: 'integerVal', value: 1 },
 *     { key: 'booleanVal', value: true },
 *     { key: 'stringVal', value: 'hello' },
 *     { key: 'binaryVal', value: [1, 2, 3, 4] },
 *   ],
 *   //timestamp: Date.now(),
 *   //fee: 100000 + bytes.length * 100000
 * }
 *
 * const signedDataTx = data(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "9ysRcXjwpHq46PUSamfWMnq2nUWoFS9rAnDgs4ynqRvU",
 *   "type": 12,
 *   "version": 1,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "fee": 100000,
 *   "timestamp": 1542716926639,
 *   "proofs": [
 *     "MbAgcTmniTasof8SuogFComQZB4fGV9UTbbKV1rTwgakb8xiDTmk47dkCKX8Y5xXAK848rSL4jJjarMLFiyifoy"
 *   ],
 *   "data": [
 *     {
 *       "type": "integer",
 *       "key": "integerVal",
 *       "value": 1
 *     },
 *     {
 *       "type": "boolean",
 *       "key": "booleanVal",
 *       "value": true
 *     },
 *     {
 *       "type": "string",
 *       "key": "stringVal",
 *       "value": "hello"
 *     },
 *     {
 *       "type": "binary",
 *       "key": "binaryVal",
 *       "value": "base64:AQIDBA=="
 *     }
 *   ]
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function data(paramsOrTx: DataParams | DataTransaction, seed?: SeedTypes): DataTransaction;
