import { IssueTransaction, long } from '../transactions';
import { SeedTypes, Params } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface IssueParams extends Params {
    name: string;
    description: string;
    decimals?: number;
    quantity: long;
    reissuable?: boolean;
    fee?: long;
    timestamp?: number;
    chainId?: string;
    script?: string;
}
export declare const issueValidation: (tx: IssueTransaction) => ValidationResult;
export declare const issueToBytes: (tx: IssueTransaction) => Uint8Array;
/**
 * Creates and signs [[IssueTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[IssueTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { issue } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   name: 'SCAM TOKEN',
 *   description: 'Awesome token that will tokenize tokenization tokenized',
 *   quantity: 1000000,
 *   //reissuable: false
 *   //decimals: 8
 *   //timestamp: Date.now(),
 *   //fee: 100000000,
 *   //chainId: 'W'
 * }
 *
 * const signedIssueTx = issue(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "DfUFknABSQxug8KybQGfVhctjGQduzzSyygZHK2Wz6E7",
 *   "type": 3,
 *   "version": 2,
 *   "decimals": 8,
 *   "reissuable": false,
 *   "fee": 100000000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926677,
 *   "chainId": "W",
 *   "proofs": [
 *     "65QRNNAaKVp9F6Nb9AijmGtfv9pN4zTb9QCF9jYenEVUyLs9dihktfUPVH6deU7BiW9cypbVytDwkT6vJSooYPw4"
 *   ],
 *   "name": "SCAM TOKEN",
 *   "description": "Awesome token that will tokenize tokenization tokenized",
 *   "quantity": 1000000
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function issue(paramsOrTx: IssueParams | IssueTransaction, seed?: SeedTypes): IssueTransaction;
