"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
function order(paramsOrOrder, seed) {
    const amountAsset = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.amountAsset : paramsOrOrder.amountAsset;
    const priceAsset = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.priceAsset : paramsOrOrder.priceAsset;
    const proofs = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.proofs : [];
    const { matcherFee, matcherPublicKey, price, amount, orderType, expiration, timestamp } = paramsOrOrder;
    const t = timestamp || Date.now();
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrOrder);
    // Use old versionless order only if it is set to null explicitly
    const version = paramsOrOrder.version === null ? undefined : paramsOrOrder.version || 2;
    const ord = {
        orderType,
        version,
        assetPair: {
            amountAsset,
            priceAsset,
        },
        price,
        amount,
        timestamp: t,
        expiration: expiration || t + 1728000000,
        matcherFee: matcherFee || 300000,
        matcherPublicKey,
        senderPublicKey,
        proofs,
        id: '',
    };
    const bytes = marshall_1.binary.serializeOrder(ord);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(ord, waves_crypto_1.signBytes(bytes, s), i));
    ord.id = waves_crypto_1.hashBytes(bytes);
    // for versionless order use signature instead of proofs
    if (ord.version === undefined)
        ord.signature = ord.proofs[0];
    return ord;
}
exports.order = order;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNhY3Rpb25zL29yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQW1EO0FBQ25ELHdDQUFrRjtBQUdsRiw4Q0FBd0M7QUFrRHhDLFNBQWdCLEtBQUssQ0FBQyxhQUFrQixFQUFFLElBQWlCO0lBRXpELE1BQU0sV0FBVyxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQzdHLE1BQU0sVUFBVSxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO0lBQzFHLE1BQU0sTUFBTSxHQUFHLGlCQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUVsRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxhQUFhLENBQUM7SUFDeEcsTUFBTSxDQUFDLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVsQyxNQUFNLGVBQWUsR0FBRyx3QkFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdDLE1BQU0sZUFBZSxHQUFHLDRCQUFrQixDQUFDLGVBQWUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUUzRSxpRUFBaUU7SUFDakUsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7SUFDeEYsTUFBTSxHQUFHLEdBQW9CO1FBQzNCLFNBQVM7UUFDVCxPQUFPO1FBQ1AsU0FBUyxFQUFFO1lBQ1QsV0FBVztZQUNYLFVBQVU7U0FDWDtRQUNELEtBQUs7UUFDTCxNQUFNO1FBQ04sU0FBUyxFQUFFLENBQUM7UUFDWixVQUFVLEVBQUUsVUFBVSxJQUFJLENBQUMsR0FBRyxVQUFVO1FBQ3hDLFVBQVUsRUFBRSxVQUFVLElBQUksTUFBTTtRQUNoQyxnQkFBZ0I7UUFDaEIsZUFBZTtRQUNmLE1BQU07UUFDTixFQUFFLEVBQUUsRUFBRTtLQUNQLENBQUM7SUFFRixNQUFNLEtBQUssR0FBRyxpQkFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV6QyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFRLENBQUMsR0FBRyxFQUFFLHdCQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsR0FBRyxDQUFDLEVBQUUsR0FBRyx3QkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTFCLHdEQUF3RDtJQUN4RCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssU0FBUztRQUFHLEdBQVcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0RSxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUM7QUF6Q0Qsc0JBeUNDIn0=