"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const schemas_1 = require("../schemas");
exports.isOrder = (p) => p.assetPair !== undefined;
exports.orderValidation = (ord) => [];
exports.orderToBytes = (ord) => waves_crypto_1.concat(waves_crypto_1.BASE58_STRING(ord.senderPublicKey), waves_crypto_1.BASE58_STRING(ord.matcherPublicKey), waves_crypto_1.OPTION(waves_crypto_1.BASE58_STRING)(ord.assetPair.amountAsset), waves_crypto_1.OPTION(waves_crypto_1.BASE58_STRING)(ord.assetPair.priceAsset), waves_crypto_1.BYTE(ord.orderType === 'sell' ? 1 : 0), waves_crypto_1.LONG(ord.price), waves_crypto_1.LONG(ord.amount), waves_crypto_1.LONG(ord.timestamp), waves_crypto_1.LONG(ord.expiration), waves_crypto_1.LONG(ord.matcherFee));
/**
 * Creates and signs [[Order]].
 *
 * You can use this function with multiple seeds. In this case it will sign order accordingly and will add one proof per seed.
 * Also you can use already signed [[Order]] as a second agrument.
 *
 * ### Usage
 * ```js
 * const { order } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   amount: 100000000, //1 waves
 *   price: 10, //for 0.00000010 BTC
 *   priceAsset: '8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS',
 *   matcherPublicKey: '7kPFrHDiGw1rCm7LPszuECwWYL3dMf6iMifLRDJQZMzy',
 *   orderType: 'buy'
 * }
 *
 *
 * const signedOrder = order(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "47YGqHdHtNPjcjE69E9EX9aD9bpC8PRKr4kp5AcZKHFq",
 *   "orderType": "buy",
 *   "assetPair": {
 *     "priceAsset": "8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS"
 *   },
 *   "price": 10,
 *   "amount": 100000000,
 *   "timestamp": 1540898977249,
 *   "expiration": 1542626977249,
 *   "matcherFee": 300000,
 *   "matcherPublicKey": "7kPFrHDiGw1rCm7LPszuECwWYL3dMf6iMifLRDJQZMzy",
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "proofs": [
 *     "4MbaDLkx9ezV1DrcGRfXRfnMBtYLaeLYBe6YGqkkuq1Pe6U9Qc5Cv7Fy1zYyGatbg47U5j374iAQFbLLZiYBChgU"
 *   ]
 * }
 * ```
 *
 * @param paramsOrOrder
 * @param [seed]
 * @returns
 *
 */
function order(paramsOrOrder, seed) {
    const amountAsset = exports.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.amountAsset : paramsOrOrder.amountAsset;
    const priceAsset = exports.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.priceAsset : paramsOrOrder.priceAsset;
    const proofs = exports.isOrder(paramsOrOrder) ? paramsOrOrder.proofs : [];
    const { matcherFee, matcherPublicKey, price, amount, orderType, expiration, timestamp } = paramsOrOrder;
    const t = generic_1.valOrDef(timestamp, Date.now());
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrOrder);
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const ord = {
        orderType,
        assetPair: {
            amountAsset,
            priceAsset,
        },
        price,
        amount,
        timestamp: t,
        expiration: generic_1.valOrDef(expiration, t + 1728000000),
        matcherFee: generic_1.valOrDef(matcherFee, 300000),
        matcherPublicKey,
        senderPublicKey,
        proofs,
        id: '',
    };
    validation_1.raiseValidationErrors(validation_1.generalValidation(ord, schemas_1.validators.Order), exports.orderValidation(ord));
    const bytes = exports.orderToBytes(ord);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(ord, waves_crypto_1.signBytes(bytes, s), i));
    ord.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? order(ord, nextSeed) : ord;
}
exports.order = order;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNhY3Rpb25zL29yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBQThGO0FBQzlGLHdDQUE4RjtBQUk5Riw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBZTFCLFFBQUEsT0FBTyxHQUFHLENBQUMsQ0FBTSxFQUFjLEVBQUUsQ0FBUyxDQUFFLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQTtBQUVwRSxRQUFBLGVBQWUsR0FBRyxDQUFDLEdBQVUsRUFBb0IsRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQUV0RCxRQUFBLFlBQVksR0FBRyxDQUFDLEdBQVUsRUFBRSxFQUFFLENBQUMscUJBQU0sQ0FDaEQsNEJBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQ2xDLDRCQUFhLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLHFCQUFNLENBQUMsNEJBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQ2hELHFCQUFNLENBQUMsNEJBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQy9DLG1CQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLG1CQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUNmLG1CQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUNoQixtQkFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFDbkIsbUJBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQ3BCLG1CQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUNyQixDQUFBO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWdERztBQUNILFNBQWdCLEtBQUssQ0FBQyxhQUFrQyxFQUFFLElBQWdCO0lBRXhFLE1BQU0sV0FBVyxHQUFHLGVBQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUE7SUFDNUcsTUFBTSxVQUFVLEdBQUcsZUFBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQTtJQUN6RyxNQUFNLE1BQU0sR0FBRyxlQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUVqRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsR0FBRyxhQUFhLENBQUE7SUFDdkcsTUFBTSxDQUFDLEdBQUcsa0JBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFFekMsTUFBTSxlQUFlLEdBQUcsNEJBQWtCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBRS9ELE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUUzQyxNQUFNLEdBQUcsR0FBVTtRQUNqQixTQUFTO1FBQ1QsU0FBUyxFQUFFO1lBQ1QsV0FBVztZQUNYLFVBQVU7U0FDWDtRQUNELEtBQUs7UUFDTCxNQUFNO1FBQ04sU0FBUyxFQUFFLENBQUM7UUFDWixVQUFVLEVBQUUsa0JBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNoRCxVQUFVLEVBQUUsa0JBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO1FBQ3hDLGdCQUFnQjtRQUNoQixlQUFlO1FBQ2YsTUFBTTtRQUNOLEVBQUUsRUFBRSxFQUFFO0tBQ1AsQ0FBQTtJQUVELGtDQUFxQixDQUNuQiw4QkFBaUIsQ0FBQyxHQUFHLEVBQUUsb0JBQVUsQ0FBQyxLQUFLLENBQUMsRUFDeEMsdUJBQWUsQ0FBQyxHQUFHLENBQUMsQ0FDckIsQ0FBQTtJQUVELE1BQU0sS0FBSyxHQUFHLG9CQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFL0IsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLEdBQUcsRUFBRSx3QkFBUyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzlELEdBQUcsQ0FBQyxFQUFFLEdBQUcsd0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUV6QixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0FBQzlDLENBQUM7QUF6Q0Qsc0JBeUNDIn0=