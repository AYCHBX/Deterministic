import { SetScriptTransaction, long } from '../transactions';
import { SeedTypes, Params } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface SetScriptParams extends Params {
    script: string | null;
    fee?: long;
    timestamp?: number;
    chainId?: string;
}
export declare const setScriptValidation: (tx: SetScriptTransaction) => ValidationResult;
export declare const setScriptToBytes: (tx: SetScriptTransaction) => Uint8Array;
/**
 * Creates and signs [[SetScriptTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[SetScriptTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { setScript } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   script: 'AQa3b8tH', //true
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W'
 * }
 *
 * const signedSetScriptTx = setScript(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "3L4sr1dDwMsevcebSMeDqqcRGzXe6emcKS8Rj5QCzBFX",
 *   "type": 13,
 *   "version": 1,
 *   "fee": 1000000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926767,
 *   "chainId": "W",
 *   "proofs": [
 *     "43NxBX1vtjxYUA89tupNTu9pjTPhtrGqMFg9ytapFDtAGegCnhFkMcsnKHtzpTxAk34v1VmzuoLC5McSdn2KU5N5"
 *   ],
 *   "script": "base64:AQa3b8tH"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function setScript(paramsOrTx: SetScriptParams | SetScriptTransaction, seed?: SeedTypes): SetScriptTransaction;
