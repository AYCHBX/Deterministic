"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const schemas_1 = require("../schemas");
exports.issueValidation = (tx) => [];
exports.issueToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.Issue, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(tx.name), waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(tx.description), waves_crypto_1.LONG(tx.quantity), waves_crypto_1.BYTE(tx.decimals), waves_crypto_1.BOOL(tx.reissuable), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp), waves_crypto_1.OPTION(waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.BASE64_STRING))(tx.script ? tx.script.slice(7) : null));
/**
 * Creates and signs [[IssueTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[IssueTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { issue } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   name: 'SCAM TOKEN',
 *   description: 'Awesome token that will tokenize tokenization tokenized',
 *   quantity: 1000000,
 *   //reissuable: false
 *   //decimals: 8
 *   //timestamp: Date.now(),
 *   //fee: 100000000,
 *   //chainId: 'W'
 * }
 *
 * const signedIssueTx = issue(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "DfUFknABSQxug8KybQGfVhctjGQduzzSyygZHK2Wz6E7",
 *   "type": 3,
 *   "version": 2,
 *   "decimals": 8,
 *   "reissuable": false,
 *   "fee": 100000000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926677,
 *   "chainId": "W",
 *   "proofs": [
 *     "65QRNNAaKVp9F6Nb9AijmGtfv9pN4zTb9QCF9jYenEVUyLs9dihktfUPVH6deU7BiW9cypbVytDwkT6vJSooYPw4"
 *   ],
 *   "name": "SCAM TOKEN",
 *   "description": "Awesome token that will tokenize tokenization tokenized",
 *   "quantity": 1000000
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function issue(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.Issue, version: 2, decimals: 8, reissuable: false, fee: 100000000, senderPublicKey, timestamp: Date.now(), chainId: 'W', proofs: [], id: '' }, paramsOrTx, { script: paramsOrTx.script == null ? undefined : generic_1.base64Prefix(paramsOrTx.script) });
    validation_1.raiseValidationErrors(validation_1.generalValidation(tx, schemas_1.validators.IssueTransaction), exports.issueValidation(tx));
    const bytes = exports.issueToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? issue(tx, nextSeed) : tx;
}
exports.issue = issue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNzdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNhY3Rpb25zL2lzc3VlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQXlFO0FBQ3pFLCtDQWFxQjtBQUNyQix3Q0FBa0c7QUFHbEcsOENBQXdFO0FBQ3hFLHdDQUF1QztBQWMxQixRQUFBLGVBQWUsR0FBRyxDQUFDLEVBQW9CLEVBQW9CLEVBQUUsQ0FBQyxFQUFFLENBQUE7QUFFaEUsUUFBQSxZQUFZLEdBQUcsQ0FBQyxFQUFvQixFQUFjLEVBQUUsQ0FBQyxxQkFBTSxDQUN0RSxvQkFBSyxDQUFDLENBQUMsOEJBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BFLDRCQUFhLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUNqQyxrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyxxQkFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUMzQixrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyxxQkFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUNsQyxtQkFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFDakIsbUJBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQ2pCLG1CQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUNuQixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFDbEIscUJBQU0sQ0FBQyxrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyw0QkFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3pFLENBQUE7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrREc7QUFDSCxTQUFnQixLQUFLLENBQUMsVUFBMEMsRUFBRSxJQUFnQjtJQUNoRixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsMEJBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFM0MsTUFBTSxlQUFlLEdBQUcsNEJBQWtCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRTVELE1BQU0sRUFBRSxtQkFDSixJQUFJLEVBQUUsOEJBQWUsQ0FBQyxLQUFLLEVBQzNCLE9BQU8sRUFBRSxDQUFDLEVBQ1YsUUFBUSxFQUFFLENBQUMsRUFDWCxVQUFVLEVBQUUsS0FBSyxFQUNqQixHQUFHLEVBQUMsU0FBUyxFQUNiLGVBQWUsRUFDZixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNyQixPQUFPLEVBQUUsR0FBRyxFQUNaLE1BQU0sRUFBRSxFQUFFLEVBQ1YsRUFBRSxFQUFFLEVBQUUsSUFDRCxVQUFVLElBQ2YsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHNCQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBRSxHQUNqRixDQUFBO0lBRUQsa0NBQXFCLENBQ25CLDhCQUFpQixDQUFDLEVBQUUsRUFBRSxvQkFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQ2xELHVCQUFlLENBQUMsRUFBRSxDQUFDLENBQ3BCLENBQUE7SUFFSCxNQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRTlCLGlCQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVEsQ0FBQyxFQUFFLEVBQUUsd0JBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxHQUFHLHdCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEIsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUM1QyxDQUFDO0FBOUJELHNCQThCQyJ9