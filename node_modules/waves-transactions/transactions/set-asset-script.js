"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("waves-crypto/validation");
const validation_2 = require("../validation");
const schemas_1 = require("../schemas");
exports.setAssetScriptValidation = (tx) => [
    validation_1.noError,
];
exports.setAssetScriptToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.SetAssetScript, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.BASE58_STRING(tx.assetId), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp), waves_crypto_1.OPTION(waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.BASE64_STRING))(tx.script ? tx.script.slice(7) : null));
/* @echo DOCS */
function setAssetScript(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    if (paramsOrTx.script === undefined)
        throw new Error('Script field cannot be undefined. Use null explicitly to remove script');
    const tx = Object.assign({ type: transactions_1.TransactionType.SetAssetScript, version: 1, fee: 100000000, senderPublicKey, timestamp: Date.now(), chainId: 'W', proofs: [], id: '' }, paramsOrTx, { script: generic_1.base64Prefix(paramsOrTx.script) });
    validation_2.raiseValidationErrors(validation_2.generalValidation(tx, schemas_1.validators.SetAssetScriptTransaction), exports.setAssetScriptValidation(tx));
    const bytes = exports.setAssetScriptToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? setAssetScript(tx, nextSeed) : tx;
}
exports.setAssetScript = setAssetScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWFzc2V0LXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvc2V0LWFzc2V0LXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUFrRjtBQUNsRiwrQ0FXcUI7QUFDckIsd0NBQWtHO0FBRWxHLHdEQUFtRTtBQUNuRSw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBVTFCLFFBQUEsd0JBQXdCLEdBQUcsQ0FBQyxFQUE2QixFQUFvQixFQUFFLENBQUM7SUFDM0Ysb0JBQU87Q0FDUixDQUFBO0FBRVksUUFBQSxxQkFBcUIsR0FBRyxDQUFDLEVBQTZCLEVBQWMsRUFBRSxDQUFDLHFCQUFNLENBQ3hGLG9CQUFLLENBQUMsQ0FBQyw4QkFBZSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0UsNEJBQWEsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQ2pDLDRCQUFhLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUN6QixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFDbEIscUJBQU0sQ0FBQyxrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyw0QkFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3pFLENBQUE7QUFFRCxnQkFBZ0I7QUFDaEIsU0FBZ0IsY0FBYyxDQUFDLFVBQTRELEVBQUUsSUFBZ0I7SUFDM0csTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLDBCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTNDLE1BQU0sZUFBZSxHQUFHLDRCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUM1RCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssU0FBUztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsd0VBQXdFLENBQUMsQ0FBQTtJQUU5SCxNQUFNLEVBQUUsbUJBQ04sSUFBSSxFQUFFLDhCQUFlLENBQUMsY0FBYyxFQUNwQyxPQUFPLEVBQUUsQ0FBQyxFQUNWLEdBQUcsRUFBRSxTQUFTLEVBQ2QsZUFBZSxFQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ3JCLE9BQU8sRUFBRSxHQUFHLEVBQ1osTUFBTSxFQUFFLEVBQUUsRUFDVixFQUFFLEVBQUUsRUFBRSxJQUNILFVBQVUsSUFDYixNQUFNLEVBQUUsc0JBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQ3hDLENBQUE7SUFFRCxrQ0FBcUIsQ0FDbkIsOEJBQWlCLENBQUMsRUFBRSxFQUFFLG9CQUFVLENBQUMseUJBQXlCLENBQUMsRUFDM0QsZ0NBQXdCLENBQUMsRUFBRSxDQUFDLENBQzdCLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBRyw2QkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUV2QyxpQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFRLENBQUMsRUFBRSxFQUFFLHdCQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0QsRUFBRSxDQUFDLEVBQUUsR0FBRyx3QkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDdEQsQ0FBQztBQTdCRCx3Q0E2QkMifQ==