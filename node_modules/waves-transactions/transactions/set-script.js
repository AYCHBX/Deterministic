"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("waves-crypto/validation");
const validation_2 = require("../validation");
const schemas_1 = require("../schemas");
exports.setScriptValidation = (tx) => [
    validation_1.noError,
];
exports.setScriptToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.SetScript, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.OPTION(waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.BASE64_STRING))(tx.script ? tx.script.slice(7) : null), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp));
/**
 * Creates and signs [[SetScriptTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[SetScriptTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { setScript } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   script: 'AQa3b8tH', //true
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W'
 * }
 *
 * const signedSetScriptTx = setScript(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "3L4sr1dDwMsevcebSMeDqqcRGzXe6emcKS8Rj5QCzBFX",
 *   "type": 13,
 *   "version": 1,
 *   "fee": 1000000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926767,
 *   "chainId": "W",
 *   "proofs": [
 *     "43NxBX1vtjxYUA89tupNTu9pjTPhtrGqMFg9ytapFDtAGegCnhFkMcsnKHtzpTxAk34v1VmzuoLC5McSdn2KU5N5"
 *   ],
 *   "script": "base64:AQa3b8tH"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function setScript(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    if (paramsOrTx.script === undefined)
        throw new Error('Script field cannot be undefined. Use null explicitly to remove script');
    const tx = Object.assign({ type: transactions_1.TransactionType.SetScript, version: 1, fee: 1000000, senderPublicKey, timestamp: Date.now(), chainId: 'W', proofs: [], id: '' }, paramsOrTx, { script: generic_1.base64Prefix(paramsOrTx.script) });
    validation_2.raiseValidationErrors(validation_2.generalValidation(tx, schemas_1.validators.SetScriptTransaction), exports.setScriptValidation(tx));
    const bytes = exports.setScriptToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? setScript(tx, nextSeed) : tx;
}
exports.setScript = setScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvc2V0LXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUE2RTtBQUM3RSwrQ0FXcUI7QUFDckIsd0NBQWtHO0FBRWxHLHdEQUFtRTtBQUNuRSw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBUzFCLFFBQUEsbUJBQW1CLEdBQUcsQ0FBQyxFQUF3QixFQUFvQixFQUFFLENBQUM7SUFDakYsb0JBQU87Q0FDUixDQUFBO0FBRVksUUFBQSxnQkFBZ0IsR0FBRyxDQUFDLEVBQXdCLEVBQWMsRUFBRSxDQUFDLHFCQUFNLENBQzlFLG9CQUFLLENBQUMsQ0FBQyw4QkFBZSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDeEUsNEJBQWEsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQ2pDLHFCQUFNLENBQUMsa0JBQUcsQ0FBQyxvQkFBSyxDQUFDLENBQUMsNEJBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN4RSxtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDbkIsQ0FBQTtBQUdEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQ0c7QUFDSCxTQUFnQixTQUFTLENBQUMsVUFBa0QsRUFBRSxJQUFnQjtJQUM1RixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsMEJBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFM0MsTUFBTSxlQUFlLEdBQUcsNEJBQWtCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQzVELElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFBO0lBRTlILE1BQU0sRUFBRSxtQkFDTixJQUFJLEVBQUUsOEJBQWUsQ0FBQyxTQUFTLEVBQy9CLE9BQU8sRUFBRSxDQUFDLEVBQ1YsR0FBRyxFQUFFLE9BQU8sRUFDWixlQUFlLEVBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDckIsT0FBTyxFQUFFLEdBQUcsRUFDWixNQUFNLEVBQUUsRUFBRSxFQUNWLEVBQUUsRUFBRSxFQUFFLElBQ0gsVUFBVSxJQUNiLE1BQU0sRUFBRSxzQkFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FDeEMsQ0FBQTtJQUVELGtDQUFxQixDQUNuQiw4QkFBaUIsQ0FBQyxFQUFFLEVBQUUsb0JBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUN0RCwyQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FDeEIsQ0FBQTtJQUVELE1BQU0sS0FBSyxHQUFHLHdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWxDLGlCQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVEsQ0FBQyxFQUFFLEVBQUUsd0JBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxHQUFHLHdCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEIsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUNqRCxDQUFDO0FBN0JELDhCQTZCQyJ9