"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const validation_2 = require("waves-crypto/validation");
const schemas_1 = require("../schemas");
exports.aliasValidation = (tx) => [
    tx.fee < 100000 ? 'fee is lees than 100000' : validation_2.noError,
    !tx.alias || tx.alias.length === 0 ? 'alias is empty or undefined' : validation_2.noError,
];
exports.aliasToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.Alias, tx.version]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(tx.alias), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp));
/**
 * Creates and signs [[AliasTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[AliasTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { alias } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   alias: 'MyNewAlias',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W',
 * }
 *
 * const signedAliasTx = alias(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "DWhcVAbj6By4HRtEceuMLRp4TUXZ1rg3TvJgZPadJnK1",
 *   "type": 10,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926756,
 *   "proofs": [
 *     "5hFwgio5eVWZLVzEsdmr62QtJvTJKAkEofvcnyviAAmBMDNrzX5ZuPpXgyMDrA5drMtUYbFmbUYVzWCZNuxowUMC"
 *   ],
 *   "alias": "MyNewAlias"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function alias(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.Alias, version: 2, fee: 100000, senderPublicKey, timestamp: Date.now(), id: '', proofs: [] }, paramsOrTx);
    validation_1.raiseValidationErrors(validation_1.generalValidation(tx, schemas_1.validators.AliasTransaction), exports.aliasValidation(tx));
    const bytes = exports.aliasToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? alias(tx, nextSeed) : tx;
}
exports.alias = alias;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNhY3Rpb25zL2FsaWFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQXlFO0FBQ3pFLCtDQUEyRztBQUMzRyx3Q0FBb0Y7QUFFcEYsOENBQXdFO0FBQ3hFLHdEQUFtRTtBQUNuRSx3Q0FBdUM7QUFTMUIsUUFBQSxlQUFlLEdBQUcsQ0FBQyxFQUFvQixFQUFvQixFQUFFLENBQUM7SUFDekUsRUFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxvQkFBTztJQUNyRCxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsb0JBQU87Q0FDN0UsQ0FBQTtBQUVZLFFBQUEsWUFBWSxHQUFHLENBQUMsRUFBb0IsRUFBYyxFQUFFLENBQUMscUJBQU0sQ0FDdEUsb0JBQUssQ0FBQyxDQUFDLDhCQUFlLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUMxQyw0QkFBYSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFDakMsa0JBQUcsQ0FBQyxvQkFBSyxDQUFDLENBQUMscUJBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFDNUIsbUJBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQ1osbUJBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQ25CLENBQUE7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Q0c7QUFDSCxTQUFnQixLQUFLLENBQUMsVUFBMEMsRUFBRSxJQUFnQjtJQUNoRixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsMEJBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFM0MsTUFBTSxlQUFlLEdBQUcsNEJBQWtCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRTVELE1BQU0sRUFBRSxtQkFDTixJQUFJLEVBQUUsOEJBQWUsQ0FBQyxLQUFLLEVBQzNCLE9BQU8sRUFBRSxDQUFDLEVBQ1YsR0FBRyxFQUFFLE1BQU0sRUFDWCxlQUFlLEVBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDckIsRUFBRSxFQUFFLEVBQUUsRUFDTixNQUFNLEVBQUUsRUFBRSxJQUNQLFVBQVUsQ0FDZCxDQUFBO0lBRUQsa0NBQXFCLENBQ25CLDhCQUFpQixDQUFDLEVBQUUsRUFBRSxvQkFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQ2xELHVCQUFlLENBQUMsRUFBRSxDQUFDLENBQ3BCLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBRyxvQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRTlCLGlCQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVEsQ0FBQyxFQUFFLEVBQUUsd0JBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxHQUFHLHdCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEIsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUM1QyxDQUFDO0FBMUJELHNCQTBCQyJ9