import { CancelLeaseTransaction, long } from '../transactions';
import { SeedTypes, Params } from '../types';
import { ValidationResult } from 'waves-crypto/validation';
export interface CancelLeaseParams extends Params {
    leaseId: string;
    fee?: long;
    timestamp?: number;
    chainId?: string;
}
export declare const cancelLeaseValidation: (tx: CancelLeaseTransaction) => ValidationResult;
export declare const cancelLeaseToBytes: (tx: CancelLeaseTransaction) => Uint8Array;
/**
 * Creates and signs [[CancelLeaseTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[CancelLeaseTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { cancelLease } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   leaseId: '2fYhSNrXpyKgbtHzh5tnpvnQYuL7JpBFMBthPSGFrqqg',
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 *   //chainId: 'W'
 * }
 *
 * const signedCancelLeaseTx = cancelLease(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "2LBjRAviJu8B9Kjdw5D582AsLcZJu6UPsuAGCJ3QYJgw",
 *   "type": 9,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926616,
 *   "chainId": "W",
 *   "proofs": [
 *     "3j64VHFfM3F3gL97mxmDzhX8HHcbHS8vZEuzY96vGoRURPkgaqT1AZyUD9ToWZ4HdVCi15tS7nrAcDiA4zUamj1N"
 *   ],
 *   "leaseId": "2fYhSNrXpyKgbtHzh5tnpvnQYuL7JpBFMBthPSGFrqqg"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
export declare function cancelLease(paramsOrTx: CancelLeaseParams | CancelLeaseTransaction, seed?: SeedTypes): CancelLeaseTransaction;
