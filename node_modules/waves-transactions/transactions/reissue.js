"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("waves-crypto/validation");
const validation_2 = require("../validation");
const schemas_1 = require("../schemas");
exports.reissueValidation = (tx) => [
    validation_1.noError,
];
exports.reissueToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTES([transactions_1.TransactionType.Reissue, tx.version, tx.chainId.charCodeAt(0)]), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.BASE58_STRING(tx.assetId), waves_crypto_1.LONG(tx.quantity), waves_crypto_1.BOOL(tx.reissuable), waves_crypto_1.LONG(tx.fee), waves_crypto_1.LONG(tx.timestamp));
/**
 * Creates and signs [[ReissueTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[ReissueTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { reissue } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * const params = {
 *   quantity: 10000,
 *   assetId: '3toqCSpAHShatE75UFKxqymuWFr8nxuxD7UcLjdxVFLx',
 *   reissuable: false,
 *   //timestamp: Date.now(),
 *   //fee: 100000000,
 *   //chainId: 'W'
 * }
 *
 * const signedReissueTx = reissue(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "7HR6PGb2eP1bDs1AQ3fVXrNAKU6Ay57pwUPLW2aLUBP4",
 *   "type": 5,
 *   "version": 2,
 *   "chainId": "W",
 *   "fee": 100000000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926734,
 *   "proofs": [
 *     "8kuyzXRnMyVxoCwDZr5MspPq89YBJEnUgZ3NFSMqA2mUQP6cseXy6ncJoRDVfNw8vhuen8u5z8popPLQXbhA31U"
 *   ],
 *   "quantity": 10000,
 *   "assetId": "3toqCSpAHShatE75UFKxqymuWFr8nxuxD7UcLjdxVFLx",
 *   "reissuable": false
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function reissue(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.Reissue, version: 2, chainId: 'W', fee: 100000000, senderPublicKey, timestamp: Date.now(), proofs: [], id: '' }, paramsOrTx);
    validation_2.raiseValidationErrors(validation_2.generalValidation(tx, schemas_1.validators.ReissueTransaction), exports.reissueValidation(tx));
    const bytes = exports.reissueToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? reissue(tx, nextSeed) : tx;
}
exports.reissue = reissue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVpc3N1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvcmVpc3N1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUEyRTtBQUMzRSwrQ0FBNkY7QUFDN0Ysd0NBQW9GO0FBRXBGLHdEQUFtRTtBQUNuRSw4Q0FBd0U7QUFDeEUsd0NBQXVDO0FBVzFCLFFBQUEsaUJBQWlCLEdBQUcsQ0FBQyxFQUFzQixFQUFvQixFQUFFLENBQUM7SUFDN0Usb0JBQU87Q0FDUixDQUFBO0FBRVksUUFBQSxjQUFjLEdBQUcsQ0FBQyxFQUFzQixFQUFjLEVBQUUsQ0FBQyxxQkFBTSxDQUMxRSxvQkFBSyxDQUFDLENBQUMsOEJBQWUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RFLDRCQUFhLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUNqQyw0QkFBYSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFDekIsbUJBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQ2pCLG1CQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUNuQixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFDWixtQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDbkIsQ0FBQTtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOENHO0FBQ0gsU0FBZ0IsT0FBTyxDQUFDLFVBQThDLEVBQUUsSUFBZ0I7SUFDdEYsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLDBCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRTNDLE1BQU0sZUFBZSxHQUFHLDRCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUU1RCxNQUFNLEVBQUUsbUJBQ04sSUFBSSxFQUFFLDhCQUFlLENBQUMsT0FBTyxFQUM3QixPQUFPLEVBQUUsQ0FBQyxFQUNWLE9BQU8sRUFBRSxHQUFHLEVBQ1osR0FBRyxFQUFFLFNBQVMsRUFDZCxlQUFlLEVBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDckIsTUFBTSxFQUFFLEVBQUUsRUFDVixFQUFFLEVBQUUsRUFBRSxJQUNILFVBQVUsQ0FDZCxDQUFBO0lBRUQsa0NBQXFCLENBQ25CLDhCQUFpQixDQUFDLEVBQUUsRUFBRSxvQkFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQ3BELHlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUN4QixDQUFBO0lBQ0MsTUFBTSxLQUFLLEdBQUcsc0JBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUVoQyxpQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFRLENBQUMsRUFBRSxFQUFFLHdCQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDN0QsRUFBRSxDQUFDLEVBQUUsR0FBRyx3QkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDOUMsQ0FBQztBQTFCRCwwQkEwQkMifQ==