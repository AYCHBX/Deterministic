"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transactions_1 = require("../transactions");
const waves_crypto_1 = require("waves-crypto");
const generic_1 = require("../generic");
const validation_1 = require("../validation");
const schemas_1 = require("../schemas");
exports.transferToBytes = (tx) => waves_crypto_1.concat(waves_crypto_1.BYTE(transactions_1.TransactionType.Transfer), waves_crypto_1.BYTE(tx.version), waves_crypto_1.BASE58_STRING(tx.senderPublicKey), waves_crypto_1.OPTION(waves_crypto_1.BASE58_STRING)(tx.assetId), waves_crypto_1.OPTION(waves_crypto_1.BASE58_STRING)(tx.feeAssetId), waves_crypto_1.LONG(tx.timestamp), waves_crypto_1.LONG(tx.amount), waves_crypto_1.LONG(tx.fee), waves_crypto_1.BASE58_STRING(tx.recipient), waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(tx.attachment));
exports.transferValidation = (tx) => [];
/**
 * Creates and signs [[TransferTransaction]].
 *
 * You can use this function with multiple seeds. In this case it will sign transaction accordingly and will add one proof per seed.
 * Also you can use already signed [[TransferTransaction]] as a second argument.
 *
 * ### Usage
 * ```js
 * const { transfer } = require('waves-transactions')
 *
 * const seed = 'b716885e9ba64442b4f1263c8e2d8671e98b800c60ec4dc2a27c83e5f9002b18'
 *
 * //Transfering 1 WAVES
 * const params = {
 *   amount: 100000000,
 *   recipient: '3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs',
 *   //feeAssetId: undefined
 *   //assetId: undefined
 *   //attachment: undefined
 *   //timestamp: Date.now(),
 *   //fee: 100000,
 * }
 *
 * const signedTransferTx = transfer(params, seed)
 * ```
 * ### Output
 * ```json
 * {
 *   "id": "8oH5RKNJzqbAWVbqqcb9nwDoCb3osZiouLXJMzj65n6g",
 *   "type": 4,
 *   "version": 2,
 *   "fee": 100000,
 *   "senderPublicKey": "G62H1XE5rnaCgCCURV5pWwQHzWezZB7VkkVgqthdKgkj",
 *   "timestamp": 1542716926744,
 *   "proofs": [
 *     "MxK7z1Lm9EYqrWwDLJ6hEtqc3dXt2XUgMrd9pBoF5zJGWDBaYboe1EcncfQZxx18WrxkT4pA4QMhBTvbFT32eB1"
 *   ],
 *   "amount": 100000000,
 *   "recipient": "3P23fi1qfVw6RVDn4CH2a5nNouEtWNQ4THs"
 * }
 * ```
 *
 * @param seed
 * @param paramsOrTx
 * @returns
 *
 */
function transfer(paramsOrTx, seed) {
    const { nextSeed } = generic_1.pullSeedAndIndex(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seed, paramsOrTx);
    const tx = Object.assign({ type: transactions_1.TransactionType.Transfer, version: 2, fee: 100000, senderPublicKey, timestamp: Date.now(), proofs: [], id: '' }, paramsOrTx);
    validation_1.raiseValidationErrors(validation_1.generalValidation(tx, schemas_1.validators.TransferTransaction), exports.transferValidation(tx));
    const bytes = exports.transferToBytes(tx);
    generic_1.mapSeed(seed, (s, i) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes);
    return nextSeed ? transfer(tx, nextSeed) : tx;
}
exports.transfer = transfer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNhY3Rpb25zL3RyYW5zZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQTRFO0FBQzVFLCtDQUFrSDtBQUNsSCx3Q0FBb0Y7QUFFcEYsOENBQXdFO0FBQ3hFLHdDQUF1QztBQVkxQixRQUFBLGVBQWUsR0FBRyxDQUFDLEVBQXVCLEVBQUUsRUFBRSxDQUFDLHFCQUFNLENBQ2hFLG1CQUFJLENBQUMsOEJBQWUsQ0FBQyxRQUFRLENBQUMsRUFDOUIsbUJBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQ2hCLDRCQUFhLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUNqQyxxQkFBTSxDQUFDLDRCQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQ2pDLHFCQUFNLENBQUMsNEJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFDcEMsbUJBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQ2xCLG1CQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUNmLG1CQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUNaLDRCQUFhLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUMzQixrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyxxQkFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUNsQyxDQUFBO0FBRVksUUFBQSxrQkFBa0IsR0FBRyxDQUFDLEVBQXVCLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQUVqRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThDRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxVQUFnRCxFQUFFLElBQWdCO0lBQ3pGLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRywwQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUUzQyxNQUFNLGVBQWUsR0FBRyw0QkFBa0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFFNUQsTUFBTSxFQUFFLG1CQUNOLElBQUksRUFBRSw4QkFBZSxDQUFDLFFBQVEsRUFDOUIsT0FBTyxFQUFFLENBQUMsRUFDVixHQUFHLEVBQUUsTUFBTSxFQUNYLGVBQWUsRUFDZixTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNyQixNQUFNLEVBQUUsRUFBRSxFQUNWLEVBQUUsRUFBRSxFQUFFLElBQ0gsVUFBVSxDQUNkLENBQUE7SUFFRCxrQ0FBcUIsQ0FDbkIsOEJBQWlCLENBQUMsRUFBRSxFQUFFLG9CQUFVLENBQUMsbUJBQW1CLENBQUMsRUFDckQsMEJBQWtCLENBQUMsRUFBRSxDQUFDLENBQ3ZCLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBRyx1QkFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRS9CLGlCQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVEsQ0FBQyxFQUFFLEVBQUUsd0JBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRCxFQUFFLENBQUMsRUFBRSxHQUFHLHdCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEIsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUMvQyxDQUFDO0FBMUJELDRCQTBCQyJ9