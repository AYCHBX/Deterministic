import { Order, Tx, IssueTransaction, TransferTransaction, ReissueTransaction, BurnTransaction, LeaseTransaction, CancelLeaseTransaction, AliasTransaction, MassTransferTransaction, DataTransaction, SetScriptTransaction, SetAssetScriptTransaction } from './transactions';
import { SeedTypes, Params } from './types';
export declare type CancellablePromise<T> = Promise<T> & {
    cancel: () => void;
};
export declare const txTypeMap: {
    [type: number]: {
        sign: (tx: Tx | Params, seed: SeedTypes) => Tx;
        serialize: (obj: Tx | Order) => Uint8Array;
    };
};
export declare const signTx: (tx: Tx, seed: SeedTypes) => Tx;
export declare const serialize: (obj: AliasTransaction | IssueTransaction | TransferTransaction | ReissueTransaction | BurnTransaction | LeaseTransaction | CancelLeaseTransaction | MassTransferTransaction | SetScriptTransaction | DataTransaction | SetAssetScriptTransaction | Order) => Uint8Array;
export declare const broadcast: (tx: Tx, apiBase: string) => Promise<any>;
export declare const delay: (timeout: number) => CancellablePromise<{}>;
export declare const waitForTx: (txId: string, timeout: number, apiBase: string) => Promise<Tx>;
