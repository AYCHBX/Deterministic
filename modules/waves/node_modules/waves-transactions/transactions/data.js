"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const waves_crypto_1 = require("waves-crypto");
const transactions_1 = require("../transactions");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const typeMap = {
    integer: ['integer', 0, waves_crypto_1.LONG],
    number: ['integer', 0, waves_crypto_1.LONG],
    boolean: ['boolean', 1, waves_crypto_1.BYTE],
    string: ['string', 3, waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)],
    binary: ['binary', 2, (s) => waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.BASE64_STRING)(s.slice(7))],
    _: ['binary', 2, waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.BYTES)],
};
const mapType = (value) => typeMap[typeof value] || typeMap['_'];
function data(paramsOrTx, seed) {
    const type = transactions_1.TRANSACTION_TYPE.DATA;
    const version = paramsOrTx.version || 1;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    if (!Array.isArray(paramsOrTx.data))
        throw new Error('["data should be array"]');
    const _timestamp = paramsOrTx.timestamp || Date.now();
    let bytes = waves_crypto_1.concat(waves_crypto_1.BYTE(transactions_1.TRANSACTION_TYPE.DATA), waves_crypto_1.BYTE(1), waves_crypto_1.BASE58_STRING(senderPublicKey), waves_crypto_1.COUNT(waves_crypto_1.SHORT)((x) => waves_crypto_1.concat(waves_crypto_1.LEN(waves_crypto_1.SHORT)(waves_crypto_1.STRING)(x.key), [mapType(x.value)[1]], mapType(x.value)[2](x.value)))(paramsOrTx.data), waves_crypto_1.LONG(_timestamp));
    const computedFee = (Math.floor(1 + (bytes.length + 8 /*feeLong*/ - 1) / 1024) * 100000);
    const tx = {
        type,
        version,
        senderPublicKey,
        fee: computedFee,
        timestamp: _timestamp,
        proofs: paramsOrTx.proofs || [],
        id: '',
        data: paramsOrTx.data && paramsOrTx.data.map((x) => {
            if (x.type)
                return x;
            else {
                const type = mapType(x.value)[0];
                return {
                    type,
                    key: x.key,
                    value: type === 'binary' ? 'base64:' + Buffer.from(x.value).toString('base64') : x.value,
                };
            }
        }),
    };
    const bytes1 = marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, waves_crypto_1.signBytes(bytes1, s), i));
    tx.id = waves_crypto_1.hashBytes(bytes1);
    return tx;
}
exports.data = data;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2FjdGlvbnMvZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQWFxQjtBQUNyQixrREFRd0I7QUFDeEIsd0NBQXlFO0FBRXpFLDhDQUF3QztBQVN4QyxNQUFNLE9BQU8sR0FBUTtJQUNuQixPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLG1CQUFJLENBQUM7SUFDN0IsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxtQkFBSSxDQUFDO0lBQzVCLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsbUJBQUksQ0FBQztJQUM3QixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLGtCQUFHLENBQUMsb0JBQUssQ0FBQyxDQUFDLHFCQUFNLENBQUMsQ0FBQztJQUN6QyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxrQkFBRyxDQUFDLG9CQUFLLENBQUMsQ0FBQyw0QkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsa0JBQUcsQ0FBQyxvQkFBSyxDQUFDLENBQUMsb0JBQUssQ0FBQyxDQUFDO0NBQ3BDLENBQUE7QUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFJLEtBQVEsRUFBNEMsRUFBRSxDQUN4RSxPQUFPLENBQUMsT0FBTyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7QUFvRXZDLFNBQWdCLElBQUksQ0FBQyxVQUFlLEVBQUUsSUFBaUI7SUFDckQsTUFBTSxJQUFJLEdBQUcsK0JBQWdCLENBQUMsSUFBSSxDQUFDO0lBQ25DLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FB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