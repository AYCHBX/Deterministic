export declare enum TRANSACTION_TYPE {
    GENESIS = 1,
    PAYMENT = 2,
    ISSUE = 3,
    TRANSFER = 4,
    REISSUE = 5,
    BURN = 6,
    EXCHANGE = 7,
    LEASE = 8,
    CANCEL_LEASE = 9,
    ALIAS = 10,
    MASS_TRANSFER = 11,
    DATA = 12,
    SET_SCRIPT = 13,
    SPONSORSHIP = 14,
    SET_ASSET_SCRIPT = 15,
    CONTRACT_INVOCATION = 16
}
export declare enum DATA_FIELD_TYPE {
    INTEGER = "integer",
    BOOLEAN = "boolean",
    STRING = "string",
    BINARY = "binary"
}
export declare type TSchema = TObject | TArray | TAnyOf | TDataTxField | TPrimitive;
export declare type TObject = {
    name: string;
    type: 'object';
    withLength?: boolean;
    optional?: boolean;
    schema: TSchema[];
};
export declare type TArray = {
    name: string;
    type: 'array';
    items: TSchema;
    toBytes?: any;
    fromBytes?: any;
};
export declare type TAnyOf = {
    name: string;
    type: 'anyOf';
    toBytes?: any;
    fromBytes?: any;
    discriminatorField?: string;
    valueField?: string;
    items: Map<string, TSchema>;
};
export declare type TPrimitive = {
    name: string;
    type?: 'primitive';
    toBytes: (...args: any) => any;
    fromBytes: (bytes: Uint8Array, start?: number) => any;
};
export declare type TDataTxField = {
    name: string;
    type: 'dataTxField';
    items: Map<DATA_FIELD_TYPE, TSchema>;
};
export declare namespace txFields {
    const longField: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | number>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const byteField: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<number>;
        fromBytes: import("./parsePrimitives").TParser<number>;
    };
    const booleanField: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<boolean>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            value: boolean;
            shift: number;
        };
    };
    const stringField: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: string;
        };
    };
    const base58field32: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const base58Option32: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: import("./parsePrimitives").TParser<string | null | undefined>;
    };
    const base64field: (name: string) => {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: string;
        };
    };
    const alias: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: any;
        };
    };
    const amount: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | number>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const assetDescription: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: string;
        };
    };
    const assetId: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const assetName: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: string;
        };
    };
    const attachment: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: string;
        };
    };
    const chainId: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<number>;
        fromBytes: import("./parsePrimitives").TParser<number>;
    };
    const decimals: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<number>;
        fromBytes: import("./parsePrimitives").TParser<number>;
    };
    const fee: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | number>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const leaseAssetId: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: import("./parsePrimitives").TParser<string | null | undefined>;
    };
    const leaseId: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const optionalAssetId: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
        fromBytes: import("./parsePrimitives").TParser<string | null | undefined>;
    };
    const quantity: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | number>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const reissuable: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<boolean>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            value: boolean;
            shift: number;
        };
    };
    const recipient: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: any;
        };
    };
    const script: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | null>;
        fromBytes: (bytes: Uint8Array, start?: number) => {
            shift: number;
            value: null;
        } | {
            value: string;
            shift: number;
        };
    };
    const senderPublicKey: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const timestamp: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<string | number>;
        fromBytes: import("./parsePrimitives").TParser<string>;
    };
    const type: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<number>;
        fromBytes: import("./parsePrimitives").TParser<number>;
    };
    const version: {
        name: string;
        toBytes: import("./serializePrimitives").TSerializer<number>;
        fromBytes: import("./parsePrimitives").TParser<number>;
    };
    const transfer: {
        name: string;
        type: string;
        schema: {
            name: string;
            toBytes: import("./serializePrimitives").TSerializer<string>;
            fromBytes: (bytes: Uint8Array, start?: number) => {
                shift: number;
                value: any;
            };
        }[];
    };
    const transfers: {
        name: string;
        type: string;
        items: {
            name: string;
            type: string;
            schema: {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: any;
                };
            }[];
        };
    };
    const dataTxField: TDataTxField;
    const functionArgField: TAnyOf;
    const data: TArray;
    const functionCall: TObject;
    const payment: TObject;
}
export declare const orderSchemaV0: TObject;
export declare const orderSchemaV2: TObject;
/**
 * Maps transaction types to schemas object. Schemas are written by keys. 0 - no version, n - version n
 */
export declare const schemasByTypeMap: {
    [TRANSACTION_TYPE.GENESIS]: {};
    [TRANSACTION_TYPE.PAYMENT]: {};
    [TRANSACTION_TYPE.ISSUE]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<boolean>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    value: boolean;
                    shift: number;
                };
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | null>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: null;
                } | {
                    value: string;
                    shift: number;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.TRANSFER]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: any;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.REISSUE]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<boolean>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    value: boolean;
                    shift: number;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.BURN]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
    [TRANSACTION_TYPE.EXCHANGE]: {
        0: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | number>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                withLength: boolean;
                type: "object";
                optional?: boolean | undefined;
                schema: TSchema[];
            })[];
        };
    };
    [TRANSACTION_TYPE.LEASE]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: any;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.CANCEL_LEASE]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
    [TRANSACTION_TYPE.ALIAS]: {
        2: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: any;
                };
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
    [TRANSACTION_TYPE.MASS_TRANSFER]: {
        1: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | null | undefined>;
                fromBytes: import("./parsePrimitives").TParser<string | null | undefined>;
            } | {
                name: string;
                type: string;
                items: {
                    name: string;
                    type: string;
                    schema: {
                        name: string;
                        toBytes: import("./serializePrimitives").TSerializer<string>;
                        fromBytes: (bytes: Uint8Array, start?: number) => {
                            shift: number;
                            value: any;
                        };
                    }[];
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.DATA]: {
        1: {
            name: string;
            type: string;
            schema: (TArray | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
    [TRANSACTION_TYPE.SET_SCRIPT]: {
        1: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | null>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: null;
                } | {
                    value: string;
                    shift: number;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.SPONSORSHIP]: {
        1: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
    [TRANSACTION_TYPE.SET_ASSET_SCRIPT]: {
        1: {
            name: string;
            type: string;
            schema: ({
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string | null>;
                fromBytes: (bytes: Uint8Array, start?: number) => {
                    shift: number;
                    value: null;
                } | {
                    value: string;
                    shift: number;
                };
            })[];
        };
    };
    [TRANSACTION_TYPE.CONTRACT_INVOCATION]: {
        1: {
            name: string;
            type: string;
            schema: (TObject | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<string>;
                fromBytes: import("./parsePrimitives").TParser<string>;
            } | {
                name: string;
                toBytes: import("./serializePrimitives").TSerializer<number>;
                fromBytes: import("./parsePrimitives").TParser<number>;
            })[];
        };
    };
};
export interface ILongFactory<LONG> {
    fromString(value: string): LONG;
    toString?: (value: LONG) => string;
}
