"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var base58_1 = require("./libs/base58");
var Base64 = require("base64-js");
var Long = require("long");
var utils_1 = require("./libs/utils");
var stringToUint8Array = function (str) {
    return Uint8Array.from(__spread(unescape(encodeURIComponent(str))).map(function (c) { return c.charCodeAt(0); }));
};
exports.empty = Uint8Array.from([]);
exports.zero = Uint8Array.from([0]);
exports.one = Uint8Array.from([1]);
exports.BASE58_STRING = function (value) { return base58_1.default.decode(value); };
exports.BASE64_STRING = function (value) { return Base64.toByteArray(value.replace('base64:', '')); };
exports.STRING = function (value) { return value ? stringToUint8Array(value) : exports.empty; };
exports.BYTE = function (value) { return Uint8Array.from([value]); };
exports.BOOL = function (value) { return exports.BYTE(value == true ? 1 : 0); };
exports.BYTES = function (value) { return Uint8Array.from(value); };
exports.SHORT = function (value) {
    var s = Long.fromNumber(value, true);
    return Uint8Array.from(s.toBytesBE().slice(6));
};
exports.INT = function (value) {
    var i = Long.fromNumber(value, true);
    return Uint8Array.from(i.toBytesBE().slice(4));
};
exports.OPTION = function (s) { return function (value) {
    return value == null
        || (typeof value == 'string' && value.length == 0)
        ? exports.zero : utils_1.concat(exports.one, s(value));
}; };
exports.LEN = function (lenSerializer) { return function (valueSerializer) { return function (value) {
    var data = valueSerializer(value);
    var len = lenSerializer(data.length);
    return utils_1.concat(len, data);
}; }; };
exports.COUNT = function (countSerializer) { return function (itemSerializer) { return function (items) {
    var data = utils_1.concat.apply(void 0, __spread(items.map(function (x) { return itemSerializer(x); })));
    var len = countSerializer(items.length);
    return utils_1.concat(len, data);
}; }; };
exports.LONG = function (value) {
    var l;
    if (typeof value === 'number') {
        if (value > Math.pow(2, 53) - 1) {
            throw new Error(value + " is too big to be precisely represented as js number. Use string instead");
        }
        l = Long.fromNumber(value);
    }
    else {
        l = Long.fromString(value.toString());
    }
    return Uint8Array.from(l.toBytesBE());
};
exports.SCRIPT = function (script) { return exports.OPTION(exports.LEN(exports.SHORT)(exports.BASE64_STRING))(script ? script.slice(7) : null); };
//# sourceMappingURL=serializePrimitives.js.map