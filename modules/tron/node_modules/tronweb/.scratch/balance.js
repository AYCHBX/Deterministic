#!/usr/bin/env node

const TronWeb = require('../dist/TronWeb.node');
const HttpProvider = TronWeb.providers.HttpProvider;
const fullNode = new HttpProvider('https://api.trongrid.io');
const solidityNode = new HttpProvider('https://api.trongrid.io');
const eventServer = 'https://api.trongrid.io';

const tronWeb = new TronWeb(
    fullNode,
    solidityNode,
    eventServer
)


class FilteredBlock {


    constructor(tronWeb) {
        if (tronWeb) {
            this.tronWeb = tronWeb
        }
    }

    getNodeInfo(callback = false) {
        if (!callback)
            return this.injectPromise(this.getNodeInfo);

        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {
            callback(null, info);
        }, 'post').catch(err => callback(err));
    }

    static pluginInterface(conf) {

            if (conf.fullNode === 'api.trongrid.io')
            return {
                Trx: {
                    'getNodeInfo': this.getNodeInfo
                }
            }

            return {}
    }

}


tronWeb.plugIn(FilteredBlock)


function plugIn (pluginClass) {

    if (pluginClass.pluginInterface) {

        let data =  pluginClass.pluginInterface(conf)
        let plugin = new pluginClass()
        for (let subClass in data) {
            let instance = tronWeb[subClass].prototype
            for (let method of data[subClass]) {
                data[subClass][method].bind(this.trx)
                instance[method] = data[subClass][method]
            }
        }

    }

}


// tronWeb.trx.getNowBlock()
