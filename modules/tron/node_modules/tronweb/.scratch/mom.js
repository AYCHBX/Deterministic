// const Ethers = require('ethers');
// const {keccak256} = require('js-sha3');
//
// console.log(keccak256('caruso'))
// console.log(Ethers.utils.keccak256(Buffer.from('caruso', 'utf-8')).toString().substring(2))
//


async function go() {return 4 }

go().then(res => console.log(res))



//
//
//
// const TronWeb = require('../dist/TronWeb.node.js');
// //
// console.log(TronWeb.address.fromHex('41b92c4bfac22e7b10b7bf6d896e9ae4b1dd88b894'))
//
//
// process.exit(0)

//
// const PRIVATE_KEY = 'F84D52ADBAA82BEB2A48C14BC09D51DE2A2BEED620F17054CAA013312838B4DB';
// SHASTA_API = 'https://api.shasta.trongrid.io';
//
// const HttpProvider = TronWeb.providers.HttpProvider;
// const fullNode = new HttpProvider(SHASTA_API);
// const solidityNode = new HttpProvider(SHASTA_API);
// const eventServer = SHASTA_API;
//
// const tronWeb = new TronWeb(
//     fullNode,
//     solidityNode,
//     eventServer,
//     PRIVATE_KEY
// )
//
// App = {
//     freeze_js : async function(){
//
//         const currentaddress = await tronWeb.address.fromHex((((await tronWeb.trx.getAccount()).address).toString()));
//         console.log("currentaddress", currentadgit dress);
//         const addressbalance = await tronWeb.trx.getBalance(currentaddress);
//         console.log("addressbalance", addressbalance);
//         const freezetransaction = await tronWeb.transactionBuilder.freezeBalance(tronWeb.toSun(100), 3, "BANDWIDTH");
//         console.log("freezetransaction", freezetransaction);
//     }
// }
//
//
// App.freeze_js().then(console.log)
//


function triggerSmartContract(...params) {
    console.log(JSON.stringify(params, null, 2));
    if (typeof params[2] !== 'object') {
        params[2] = {
            feeLimit: params[2],
            callValue: params[3]
        }
        params.splice(3,1)
    }
    console.log(JSON.stringify(params, null, 2));
}


triggerSmartContract( 'contractAddress',
    'functionSelector',
    'feeLimit',
    'callValue',
    'parameters',
    'issuerAddress',
    'callback'
)





this.tronWeb.eventServer.request(`v1/accountd/${address}/transactions`, {
    offset,
    limit
}, 'post').then(({transaction}) => {
    callback(null, transaction);
}).catch(err => callback(err));
